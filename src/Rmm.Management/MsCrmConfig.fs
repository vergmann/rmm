// This code was generated by `SqlHydra.SqlServer` -- v1.0.3.0.
namespace Rmm.Management.MsCrmConfig

type Column(reader: System.Data.IDataReader, getOrdinal: string -> int, column) =
        member __.Name = column
        member __.IsNull() = getOrdinal column |> reader.IsDBNull
        override __.ToString() = __.Name

type RequiredColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getter

type OptionalColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getter: int -> 'T, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = 
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some (getter o)

type RequiredBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = alias |> Option.defaultValue __.Name |> getOrdinal |> getValue :?> byte[]

type OptionalBinaryColumn<'T, 'Reader when 'Reader :> System.Data.IDataReader>(reader: 'Reader, getOrdinal, getValue: int -> obj, column) =
        inherit Column(reader, getOrdinal, column)
        member __.Read(?alias) = 
            match alias |> Option.defaultValue __.Name |> getOrdinal with
            | o when reader.IsDBNull o -> None
            | o -> Some (getValue o :?> byte[])
        
[<AutoOpen>]        
module Utils =
    type System.Data.IDataReader with
        member reader.GetDateOnly(ordinal: int) = 
            reader.GetDateTime(ordinal) |> System.DateOnly.FromDateTime
    
    type System.Data.Common.DbDataReader with
        member reader.GetTimeOnly(ordinal: int) = 
            reader.GetFieldValue(ordinal) |> System.TimeOnly.FromTimeSpan
        
        

module dbo =
    [<CLIMutable>]
    type AuthenticationSettings =
        { ConfigurationName: string
          Id: System.Guid
          IsDeleted: bool }

    type AuthenticationSettingsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ConfigurationName = RequiredColumn(reader, getOrdinal, reader.GetString, "ConfigurationName")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { ConfigurationName = __.ConfigurationName.Read()
              Id = __.Id.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type AuthenticationSettingsProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type AuthenticationSettingsPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type AuthenticationSettingsV2 =
        { ConfigurationName: string
          Id: System.Guid
          IsDeleted: bool }

    type AuthenticationSettingsV2Reader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ConfigurationName = RequiredColumn(reader, getOrdinal, reader.GetString, "ConfigurationName")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { ConfigurationName = __.ConfigurationName.Read()
              Id = __.Id.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type AuthenticationSettingsV2Properties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type AuthenticationSettingsV2PropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Certificates =
        { CertificateData: Option<string>
          Id: System.Guid
          Name: string
          ParentId: Option<System.Guid>
          StoreFindType: Option<string>
          StoreLocation: Option<string>
          StoreName: Option<string>
          Type: string
          IsDeleted: bool }

    type CertificatesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CertificateData = OptionalColumn(reader, getOrdinal, reader.GetString, "CertificateData")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ParentId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "ParentId")
        member __.StoreFindType = OptionalColumn(reader, getOrdinal, reader.GetString, "StoreFindType")
        member __.StoreLocation = OptionalColumn(reader, getOrdinal, reader.GetString, "StoreLocation")
        member __.StoreName = OptionalColumn(reader, getOrdinal, reader.GetString, "StoreName")
        member __.Type = RequiredColumn(reader, getOrdinal, reader.GetString, "Type")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { CertificateData = __.CertificateData.Read()
              Id = __.Id.Read()
              Name = __.Name.Read()
              ParentId = __.ParentId.Read()
              StoreFindType = __.StoreFindType.Read()
              StoreLocation = __.StoreLocation.Read()
              StoreName = __.StoreName.Read()
              Type = __.Type.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type CertificatesProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type CertificatesPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ClientPatchContainedInfo =
        { ContainedPatchId: System.Guid
          Id: System.Guid
          PatchId: System.Guid
          IsDeleted: bool }

    type ClientPatchContainedInfoReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ContainedPatchId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "ContainedPatchId")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.PatchId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "PatchId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { ContainedPatchId = __.ContainedPatchId.Read()
              Id = __.Id.Read()
              PatchId = __.PatchId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ClientPatchContainedInfoProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type ClientPatchContainedInfoPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ClientPatchDetails =
        { Id: System.Guid
          PatchId: System.Guid
          IsDeleted: bool }

    type ClientPatchDetailsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.PatchId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "PatchId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Id = __.Id.Read()
              PatchId = __.PatchId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ClientPatchDetailsProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type ClientPatchDetailsPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ClientPatchRequiredInfo =
        { Id: System.Guid
          PatchId: System.Guid
          RequiredPatchId: System.Guid
          IsDeleted: bool }

    type ClientPatchRequiredInfoReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.PatchId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "PatchId")
        member __.RequiredPatchId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "RequiredPatchId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Id = __.Id.Read()
              PatchId = __.PatchId.Read()
              RequiredPatchId = __.RequiredPatchId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ClientPatchRequiredInfoProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type ClientPatchRequiredInfoPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ConfigSettings =
        { HelpServerUrl: Option<string>
          Id: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          InstallOn: Option<System.DateTime>
          IsRegistered: Option<bool>
          LicenseKey: Option<string>
          LicenseKeyV5: Option<string>
          LicenseKeyV5RTM: Option<string>
          PrivilegeReportGroupId: Option<System.Guid>
          PrivilegeUserGroupId: Option<System.Guid>
          ProductId: Option<string>
          ProductIdV5: Option<string>
          ProductIdV5RTM: Option<string>
          RegistrationId: Option<string>
          RegistrationXml: Option<string>
          ReportingGroupId: Option<System.Guid>
          SqlAccessGroupId: Option<System.Guid>
          UserGroupId: Option<System.Guid>
          IsDeleted: bool }

    type ConfigSettingsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.HelpServerUrl = OptionalColumn(reader, getOrdinal, reader.GetString, "HelpServerUrl")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.InstallOn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "InstallOn")
        member __.IsRegistered = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "IsRegistered")
        member __.LicenseKey = OptionalColumn(reader, getOrdinal, reader.GetString, "LicenseKey")
        member __.LicenseKeyV5 = OptionalColumn(reader, getOrdinal, reader.GetString, "LicenseKeyV5")
        member __.LicenseKeyV5RTM = OptionalColumn(reader, getOrdinal, reader.GetString, "LicenseKeyV5RTM")
        member __.PrivilegeReportGroupId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "PrivilegeReportGroupId")
        member __.PrivilegeUserGroupId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "PrivilegeUserGroupId")
        member __.ProductId = OptionalColumn(reader, getOrdinal, reader.GetString, "ProductId")
        member __.ProductIdV5 = OptionalColumn(reader, getOrdinal, reader.GetString, "ProductIdV5")
        member __.ProductIdV5RTM = OptionalColumn(reader, getOrdinal, reader.GetString, "ProductIdV5RTM")
        member __.RegistrationId = OptionalColumn(reader, getOrdinal, reader.GetString, "RegistrationId")
        member __.RegistrationXml = OptionalColumn(reader, getOrdinal, reader.GetString, "RegistrationXml")
        member __.ReportingGroupId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "ReportingGroupId")
        member __.SqlAccessGroupId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "SqlAccessGroupId")
        member __.UserGroupId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UserGroupId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { HelpServerUrl = __.HelpServerUrl.Read()
              Id = __.Id.Read()
              InstallOn = __.InstallOn.Read()
              IsRegistered = __.IsRegistered.Read()
              LicenseKey = __.LicenseKey.Read()
              LicenseKeyV5 = __.LicenseKeyV5.Read()
              LicenseKeyV5RTM = __.LicenseKeyV5RTM.Read()
              PrivilegeReportGroupId = __.PrivilegeReportGroupId.Read()
              PrivilegeUserGroupId = __.PrivilegeUserGroupId.Read()
              ProductId = __.ProductId.Read()
              ProductIdV5 = __.ProductIdV5.Read()
              ProductIdV5RTM = __.ProductIdV5RTM.Read()
              RegistrationId = __.RegistrationId.Read()
              RegistrationXml = __.RegistrationXml.Read()
              ReportingGroupId = __.ReportingGroupId.Read()
              SqlAccessGroupId = __.SqlAccessGroupId.Read()
              UserGroupId = __.UserGroupId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ConfigSettingsProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type ConfigSettingsPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ConfigurationMetadata =
        { Id: System.Guid
          ConfigurationMetadataXml: Option<string>
          BuildVersion: Option<string>
          [<SqlHydra.ProviderDbType("DateTime")>]
          InstalledOn: Option<System.DateTime>
          MaxReplBlobLengthBytes: int }

    type ConfigurationMetadataReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ConfigurationMetadataXml = OptionalColumn(reader, getOrdinal, reader.GetString, "ConfigurationMetadataXml")
        member __.BuildVersion = OptionalColumn(reader, getOrdinal, reader.GetString, "BuildVersion")
        member __.InstalledOn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "InstalledOn")
        member __.MaxReplBlobLengthBytes = RequiredColumn(reader, getOrdinal, reader.GetInt32, "MaxReplBlobLengthBytes")

        member __.Read() =
            { Id = __.Id.Read()
              ConfigurationMetadataXml = __.ConfigurationMetadataXml.Read()
              BuildVersion = __.BuildVersion.Read()
              InstalledOn = __.InstalledOn.Read()
              MaxReplBlobLengthBytes = __.MaxReplBlobLengthBytes.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type CrmKey =
        { [<SqlHydra.ProviderDbType("DateTime")>]
          CreatedOn: System.DateTime
          Enabled: Option<bool>
          Id: System.Guid
          KeyType: string
          ScaleGroupId: Option<System.Guid>
          IsDeleted: bool }

    type CrmKeyReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CreatedOn = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "CreatedOn")
        member __.Enabled = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Enabled")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.KeyType = RequiredColumn(reader, getOrdinal, reader.GetString, "KeyType")
        member __.ScaleGroupId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "ScaleGroupId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { CreatedOn = __.CreatedOn.Read()
              Enabled = __.Enabled.Read()
              Id = __.Id.Read()
              KeyType = __.KeyType.Read()
              ScaleGroupId = __.ScaleGroupId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type CrmKeyProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type CrmKeyPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type CrmKeySetting =
        { ActiveKeyId: Option<System.Guid>
          Enabled: Option<bool>
          Id: System.Guid
          IsConfigurationRow: Option<bool>
          KeyType: string
          ScaleGroupId: Option<System.Guid>
          IsDeleted: bool }

    type CrmKeySettingReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ActiveKeyId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "ActiveKeyId")
        member __.Enabled = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Enabled")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.IsConfigurationRow = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "IsConfigurationRow")
        member __.KeyType = RequiredColumn(reader, getOrdinal, reader.GetString, "KeyType")
        member __.ScaleGroupId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "ScaleGroupId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { ActiveKeyId = __.ActiveKeyId.Read()
              Enabled = __.Enabled.Read()
              Id = __.Id.Read()
              IsConfigurationRow = __.IsConfigurationRow.Read()
              KeyType = __.KeyType.Read()
              ScaleGroupId = __.ScaleGroupId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type CrmKeySettingProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type CrmKeySettingPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type DBUpdateInstallInfo =
        { MajorVersion: int
          MinorVersion: int
          BuildNumber: int
          Revision: int
          DBUpdateActionId: System.Guid
          CrmDatabase: int }

    type DBUpdateInstallInfoReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.MajorVersion = RequiredColumn(reader, getOrdinal, reader.GetInt32, "MajorVersion")
        member __.MinorVersion = RequiredColumn(reader, getOrdinal, reader.GetInt32, "MinorVersion")
        member __.BuildNumber = RequiredColumn(reader, getOrdinal, reader.GetInt32, "BuildNumber")
        member __.Revision = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Revision")
        member __.DBUpdateActionId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "DBUpdateActionId")
        member __.CrmDatabase = RequiredColumn(reader, getOrdinal, reader.GetInt32, "CrmDatabase")

        member __.Read() =
            { MajorVersion = __.MajorVersion.Read()
              MinorVersion = __.MinorVersion.Read()
              BuildNumber = __.BuildNumber.Read()
              Revision = __.Revision.Read()
              DBUpdateActionId = __.DBUpdateActionId.Read()
              CrmDatabase = __.CrmDatabase.Read() }

        member __.ReadIfNotNull() =
            if __.MajorVersion.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type DataEncryptionKey =
        { CrmKeyName: Option<string>
          Id: System.Guid
          IsConfigurationRow: Option<bool>
          IsDeleted: bool }

    type DataEncryptionKeyReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CrmKeyName = OptionalColumn(reader, getOrdinal, reader.GetString, "CrmKeyName")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.IsConfigurationRow = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "IsConfigurationRow")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { CrmKeyName = __.CrmKeyName.Read()
              Id = __.Id.Read()
              IsConfigurationRow = __.IsConfigurationRow.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type DataEncryptionKeyProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type DataEncryptionKeyPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Deployment =
        { DefaultOrganizationId: System.Guid
          Id: System.Guid
          IsDeleted: bool }

    type DeploymentReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.DefaultOrganizationId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "DefaultOrganizationId")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { DefaultOrganizationId = __.DefaultOrganizationId.Read()
              Id = __.Id.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type DeploymentProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type DeploymentPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ExternalKey =
        { Id: System.Guid
          Name: string
          IsDeleted: bool }

    type ExternalKeyReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Id = __.Id.Read()
              Name = __.Name.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ExternalKeyProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type ExternalKeyPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Feature =
        { Description: string
          Id: System.Guid
          Name: string
          UniqueifierId: Option<System.Guid>
          IsDeleted: bool }

    type FeatureReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Description = RequiredColumn(reader, getOrdinal, reader.GetString, "Description")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.UniqueifierId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueifierId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Description = __.Description.Read()
              Id = __.Id.Read()
              Name = __.Name.Read()
              UniqueifierId = __.UniqueifierId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type FeatureAccessRightMap =
        { AccessRight: int
          FeatureId: System.Guid
          Id: System.Guid
          IsDeleted: bool }

    type FeatureAccessRightMapReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.AccessRight = RequiredColumn(reader, getOrdinal, reader.GetInt32, "AccessRight")
        member __.FeatureId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "FeatureId")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { AccessRight = __.AccessRight.Read()
              FeatureId = __.FeatureId.Read()
              Id = __.Id.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type FeatureAccessRightMapProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type FeatureAccessRightMapPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type FeatureControl =
        { [<SqlHydra.ProviderDbType("DateTime")>]
          CreatedOn: System.DateTime
          Enabled: bool
          Id: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedOn: System.DateTime
          Name: string
          Scope: int
          ScopeId: Option<System.Guid>
          IsDeleted: bool }

    type FeatureControlReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CreatedOn = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "CreatedOn")
        member __.Enabled = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "Enabled")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ModifiedOn = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedOn")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.Scope = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Scope")
        member __.ScopeId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "ScopeId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { CreatedOn = __.CreatedOn.Read()
              Enabled = __.Enabled.Read()
              Id = __.Id.Read()
              ModifiedOn = __.ModifiedOn.Read()
              Name = __.Name.Read()
              Scope = __.Scope.Read()
              ScopeId = __.ScopeId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type FeatureControlDefinition =
        { ConfigSku: Option<string>
          [<SqlHydra.ProviderDbType("DateTime")>]
          CreatedOn: System.DateTime
          Enabled: bool
          FeatureLocation: Option<string>
          FeatureType: Option<string>
          Id: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedOn: System.DateTime
          Name: string
          ParentFeatureName: Option<string>
          IsDeleted: bool }

    type FeatureControlDefinitionReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ConfigSku = OptionalColumn(reader, getOrdinal, reader.GetString, "ConfigSku")
        member __.CreatedOn = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "CreatedOn")
        member __.Enabled = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "Enabled")
        member __.FeatureLocation = OptionalColumn(reader, getOrdinal, reader.GetString, "FeatureLocation")
        member __.FeatureType = OptionalColumn(reader, getOrdinal, reader.GetString, "FeatureType")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ModifiedOn = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedOn")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ParentFeatureName = OptionalColumn(reader, getOrdinal, reader.GetString, "ParentFeatureName")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { ConfigSku = __.ConfigSku.Read()
              CreatedOn = __.CreatedOn.Read()
              Enabled = __.Enabled.Read()
              FeatureLocation = __.FeatureLocation.Read()
              FeatureType = __.FeatureType.Read()
              Id = __.Id.Read()
              ModifiedOn = __.ModifiedOn.Read()
              Name = __.Name.Read()
              ParentFeatureName = __.ParentFeatureName.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type FeatureControlDefinitionProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type FeatureControlDefinitionPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type FeatureControlProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type FeatureControlPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type FeatureControlVersions =
        { Id: System.Guid
          VersionName: string
          VersionValue: string
          IsDeleted: bool }

    type FeatureControlVersionsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.VersionName = RequiredColumn(reader, getOrdinal, reader.GetString, "VersionName")
        member __.VersionValue = RequiredColumn(reader, getOrdinal, reader.GetString, "VersionValue")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Id = __.Id.Read()
              VersionName = __.VersionName.Read()
              VersionValue = __.VersionValue.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type FeatureControlVersionsMapping =
        { [<SqlHydra.ProviderDbType("DateTime")>]
          CreatedOn: System.DateTime
          Enabled: bool
          FeatureControlId: System.Guid
          Id: System.Guid
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedOn: System.DateTime
          VersionValue: string
          IsDeleted: bool }

    type FeatureControlVersionsMappingReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CreatedOn = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "CreatedOn")
        member __.Enabled = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "Enabled")
        member __.FeatureControlId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "FeatureControlId")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ModifiedOn = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedOn")
        member __.VersionValue = RequiredColumn(reader, getOrdinal, reader.GetString, "VersionValue")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { CreatedOn = __.CreatedOn.Read()
              Enabled = __.Enabled.Read()
              FeatureControlId = __.FeatureControlId.Read()
              Id = __.Id.Read()
              ModifiedOn = __.ModifiedOn.Read()
              VersionValue = __.VersionValue.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type FeatureControlVersionsMappingProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type FeatureControlVersionsMappingPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type FeatureControlVersionsProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type FeatureControlVersionsPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type FeaturePrivilegeMap =
        { FeatureId: System.Guid
          Id: System.Guid
          PrivilegeId: System.Guid
          UniqueifierId: Option<System.Guid>
          IsDeleted: bool }

    type FeaturePrivilegeMapReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.FeatureId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "FeatureId")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.PrivilegeId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "PrivilegeId")
        member __.UniqueifierId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueifierId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { FeatureId = __.FeatureId.Read()
              Id = __.Id.Read()
              PrivilegeId = __.PrivilegeId.Read()
              UniqueifierId = __.UniqueifierId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type FeaturePrivilegeMapProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type FeaturePrivilegeMapPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type FeatureProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type FeaturePropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type FederationProvider =
        { ActiveEndpoint: Option<string>
          ActiveMexEndpoint: Option<string>
          Enabled: Option<bool>
          Id: System.Guid
          IdentityClaim: Option<string>
          MetadataUri: Option<string>
          Name: string
          PassiveEndpoint: Option<string>
          RelyingPartyActiveIdentifier: string
          RelyingPartyPassiveIdentifier: string
          IsDeleted: bool }

    type FederationProviderReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ActiveEndpoint = OptionalColumn(reader, getOrdinal, reader.GetString, "ActiveEndpoint")
        member __.ActiveMexEndpoint = OptionalColumn(reader, getOrdinal, reader.GetString, "ActiveMexEndpoint")
        member __.Enabled = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Enabled")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.IdentityClaim = OptionalColumn(reader, getOrdinal, reader.GetString, "IdentityClaim")
        member __.MetadataUri = OptionalColumn(reader, getOrdinal, reader.GetString, "MetadataUri")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.PassiveEndpoint = OptionalColumn(reader, getOrdinal, reader.GetString, "PassiveEndpoint")
        member __.RelyingPartyActiveIdentifier = RequiredColumn(reader, getOrdinal, reader.GetString, "RelyingPartyActiveIdentifier")
        member __.RelyingPartyPassiveIdentifier = RequiredColumn(reader, getOrdinal, reader.GetString, "RelyingPartyPassiveIdentifier")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { ActiveEndpoint = __.ActiveEndpoint.Read()
              ActiveMexEndpoint = __.ActiveMexEndpoint.Read()
              Enabled = __.Enabled.Read()
              Id = __.Id.Read()
              IdentityClaim = __.IdentityClaim.Read()
              MetadataUri = __.MetadataUri.Read()
              Name = __.Name.Read()
              PassiveEndpoint = __.PassiveEndpoint.Read()
              RelyingPartyActiveIdentifier = __.RelyingPartyActiveIdentifier.Read()
              RelyingPartyPassiveIdentifier = __.RelyingPartyPassiveIdentifier.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type FederationProviderProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type FederationProviderPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type MonitoringResults =
        { [<SqlHydra.ProviderDbType("DateTime")>]
          EndTime: Option<System.DateTime>
          Id: System.Guid
          Role: int
          Server: Option<string>
          [<SqlHydra.ProviderDbType("DateTime")>]
          StartTime: Option<System.DateTime>
          Status: int
          StatusDetail: Option<string>
          TestName: Option<string>
          IsDeleted: bool }

    type MonitoringResultsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.EndTime = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "EndTime")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.Role = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Role")
        member __.Server = OptionalColumn(reader, getOrdinal, reader.GetString, "Server")
        member __.StartTime = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "StartTime")
        member __.Status = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Status")
        member __.StatusDetail = OptionalColumn(reader, getOrdinal, reader.GetString, "StatusDetail")
        member __.TestName = OptionalColumn(reader, getOrdinal, reader.GetString, "TestName")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { EndTime = __.EndTime.Read()
              Id = __.Id.Read()
              Role = __.Role.Read()
              Server = __.Server.Read()
              StartTime = __.StartTime.Read()
              Status = __.Status.Read()
              StatusDetail = __.StatusDetail.Read()
              TestName = __.TestName.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type MonitoringResultsProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type MonitoringResultsPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type MonitoringSettings = { Id: System.Guid; IsDeleted: bool }

    type MonitoringSettingsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Id = __.Id.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type MonitoringSettingsProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type MonitoringSettingsPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Notification =
        { [<SqlHydra.ProviderDbType("DateTime")>]
          CreatedOn: System.DateTime
          EventData: Option<string>
          EventId: int
          Id: System.Guid
          OrganizationId: System.Guid
          IsDeleted: bool }

    type NotificationReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CreatedOn = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "CreatedOn")
        member __.EventData = OptionalColumn(reader, getOrdinal, reader.GetString, "EventData")
        member __.EventId = RequiredColumn(reader, getOrdinal, reader.GetInt32, "EventId")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.OrganizationId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "OrganizationId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { CreatedOn = __.CreatedOn.Read()
              EventData = __.EventData.Read()
              EventId = __.EventId.Read()
              Id = __.Id.Read()
              OrganizationId = __.OrganizationId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type NotificationProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type NotificationPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Organization =
        { AreReportsPublished: Option<bool>
          AvailabilityGroup: Option<string>
          ConnectionString: Option<string>
          DatabaseName: Option<string>
          DatacenterId: Option<System.Guid>
          DelegatedAdminCrmUserId: Option<System.Guid>
          FriendlyName: Option<string>
          HelpContentServerUrl: Option<string>
          Id: System.Guid
          MirroredSqlServerName: Option<string>
          PartitionNumber: Option<int>
          ProvisioningActionInProgress: Option<string>
          ScaleGroupId: Option<System.Guid>
          SqlServerName: Option<string>
          SrsUrl: Option<string>
          State: int
          StorageGroupId: Option<System.Guid>
          [<SqlHydra.ProviderDbType("DateTime")>]
          StorageLicensesPurchasedModifiedOn: Option<System.DateTime>
          SupportUserCrmUserId: Option<System.Guid>
          Type: Option<int>
          UniqueName: string
          UniqueifierId: Option<System.Guid>
          UrlName: Option<string>
          [<SqlHydra.ProviderDbType("DateTime")>]
          UserLicensesPurchasedModifiedOn: Option<System.DateTime>
          IsDeleted: bool }

    type OrganizationReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.AreReportsPublished = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "AreReportsPublished")
        member __.AvailabilityGroup = OptionalColumn(reader, getOrdinal, reader.GetString, "AvailabilityGroup")
        member __.ConnectionString = OptionalColumn(reader, getOrdinal, reader.GetString, "ConnectionString")
        member __.DatabaseName = OptionalColumn(reader, getOrdinal, reader.GetString, "DatabaseName")
        member __.DatacenterId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "DatacenterId")
        member __.DelegatedAdminCrmUserId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "DelegatedAdminCrmUserId")
        member __.FriendlyName = OptionalColumn(reader, getOrdinal, reader.GetString, "FriendlyName")
        member __.HelpContentServerUrl = OptionalColumn(reader, getOrdinal, reader.GetString, "HelpContentServerUrl")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.MirroredSqlServerName = OptionalColumn(reader, getOrdinal, reader.GetString, "MirroredSqlServerName")
        member __.PartitionNumber = OptionalColumn(reader, getOrdinal, reader.GetInt32, "PartitionNumber")
        member __.ProvisioningActionInProgress = OptionalColumn(reader, getOrdinal, reader.GetString, "ProvisioningActionInProgress")
        member __.ScaleGroupId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "ScaleGroupId")
        member __.SqlServerName = OptionalColumn(reader, getOrdinal, reader.GetString, "SqlServerName")
        member __.SrsUrl = OptionalColumn(reader, getOrdinal, reader.GetString, "SrsUrl")
        member __.State = RequiredColumn(reader, getOrdinal, reader.GetInt32, "State")
        member __.StorageGroupId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "StorageGroupId")
        member __.StorageLicensesPurchasedModifiedOn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "StorageLicensesPurchasedModifiedOn")
        member __.SupportUserCrmUserId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "SupportUserCrmUserId")
        member __.Type = OptionalColumn(reader, getOrdinal, reader.GetInt32, "Type")
        member __.UniqueName = RequiredColumn(reader, getOrdinal, reader.GetString, "UniqueName")
        member __.UniqueifierId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueifierId")
        member __.UrlName = OptionalColumn(reader, getOrdinal, reader.GetString, "UrlName")
        member __.UserLicensesPurchasedModifiedOn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "UserLicensesPurchasedModifiedOn")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { AreReportsPublished = __.AreReportsPublished.Read()
              AvailabilityGroup = __.AvailabilityGroup.Read()
              ConnectionString = __.ConnectionString.Read()
              DatabaseName = __.DatabaseName.Read()
              DatacenterId = __.DatacenterId.Read()
              DelegatedAdminCrmUserId = __.DelegatedAdminCrmUserId.Read()
              FriendlyName = __.FriendlyName.Read()
              HelpContentServerUrl = __.HelpContentServerUrl.Read()
              Id = __.Id.Read()
              MirroredSqlServerName = __.MirroredSqlServerName.Read()
              PartitionNumber = __.PartitionNumber.Read()
              ProvisioningActionInProgress = __.ProvisioningActionInProgress.Read()
              ScaleGroupId = __.ScaleGroupId.Read()
              SqlServerName = __.SqlServerName.Read()
              SrsUrl = __.SrsUrl.Read()
              State = __.State.Read()
              StorageGroupId = __.StorageGroupId.Read()
              StorageLicensesPurchasedModifiedOn = __.StorageLicensesPurchasedModifiedOn.Read()
              SupportUserCrmUserId = __.SupportUserCrmUserId.Read()
              Type = __.Type.Read()
              UniqueName = __.UniqueName.Read()
              UniqueifierId = __.UniqueifierId.Read()
              UrlName = __.UrlName.Read()
              UserLicensesPurchasedModifiedOn = __.UserLicensesPurchasedModifiedOn.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type OrganizationFeatureMap =
        { Enabled: bool
          FeatureId: System.Guid
          Id: System.Guid
          OrganizationId: Option<System.Guid>
          UniqueifierId: Option<System.Guid>
          IsDeleted: bool }

    type OrganizationFeatureMapReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Enabled = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "Enabled")
        member __.FeatureId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "FeatureId")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.OrganizationId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "OrganizationId")
        member __.UniqueifierId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueifierId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Enabled = __.Enabled.Read()
              FeatureId = __.FeatureId.Read()
              Id = __.Id.Read()
              OrganizationId = __.OrganizationId.Read()
              UniqueifierId = __.UniqueifierId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type OrganizationFeatureMapProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type OrganizationFeatureMapPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type OrganizationMaintenanceJobs =
        { [<SqlHydra.ProviderDbType("DateTime")>]
          CreatedOn: System.DateTime
          Enabled: bool
          HostId: Option<string>
          Id: System.Guid
          LastResultCode: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          LastRunTime: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedOn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          NextRunTime: Option<System.DateTime>
          OperationType: int
          OrganizationId: System.Guid
          RecurrencePattern: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          RecurrenceStartTime: System.DateTime
          SqlServerName: string
          State: int
          IsDeleted: bool }

    type OrganizationMaintenanceJobsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CreatedOn = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "CreatedOn")
        member __.Enabled = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "Enabled")
        member __.HostId = OptionalColumn(reader, getOrdinal, reader.GetString, "HostId")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.LastResultCode = RequiredColumn(reader, getOrdinal, reader.GetInt32, "LastResultCode")
        member __.LastRunTime = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "LastRunTime")
        member __.ModifiedOn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedOn")
        member __.NextRunTime = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "NextRunTime")
        member __.OperationType = RequiredColumn(reader, getOrdinal, reader.GetInt32, "OperationType")
        member __.OrganizationId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "OrganizationId")
        member __.RecurrencePattern = RequiredColumn(reader, getOrdinal, reader.GetString, "RecurrencePattern")
        member __.RecurrenceStartTime = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "RecurrenceStartTime")
        member __.SqlServerName = RequiredColumn(reader, getOrdinal, reader.GetString, "SqlServerName")
        member __.State = RequiredColumn(reader, getOrdinal, reader.GetInt32, "State")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { CreatedOn = __.CreatedOn.Read()
              Enabled = __.Enabled.Read()
              HostId = __.HostId.Read()
              Id = __.Id.Read()
              LastResultCode = __.LastResultCode.Read()
              LastRunTime = __.LastRunTime.Read()
              ModifiedOn = __.ModifiedOn.Read()
              NextRunTime = __.NextRunTime.Read()
              OperationType = __.OperationType.Read()
              OrganizationId = __.OrganizationId.Read()
              RecurrencePattern = __.RecurrencePattern.Read()
              RecurrenceStartTime = __.RecurrenceStartTime.Read()
              SqlServerName = __.SqlServerName.Read()
              State = __.State.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type OrganizationMaintenanceJobsProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type OrganizationMaintenanceJobsPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type OrganizationMonitoringSettings =
        { Id: System.Guid
          OrganizationId: Option<System.Guid>
          IsDeleted: bool }

    type OrganizationMonitoringSettingsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.OrganizationId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "OrganizationId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Id = __.Id.Read()
              OrganizationId = __.OrganizationId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type OrganizationMonitoringSettingsProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type OrganizationMonitoringSettingsPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type OrganizationProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type OrganizationPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Partner =
        { Id: System.Guid
          Name: string
          IsDeleted: bool }

    type PartnerReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Id = __.Id.Read()
              Name = __.Name.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PartnerProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type PartnerPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PartnerSolution =
        { Id: System.Guid
          Name: string
          PartnerId: System.Guid
          IsDeleted: bool }

    type PartnerSolutionReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.PartnerId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "PartnerId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Id = __.Id.Read()
              Name = __.Name.Read()
              PartnerId = __.PartnerId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PartnerSolutionOrganization =
        { Id: System.Guid
          OrganizationId: System.Guid
          PartnerSolutionId: System.Guid
          State: int
          IsDeleted: bool }

    type PartnerSolutionOrganizationReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.OrganizationId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "OrganizationId")
        member __.PartnerSolutionId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "PartnerSolutionId")
        member __.State = RequiredColumn(reader, getOrdinal, reader.GetInt32, "State")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Id = __.Id.Read()
              OrganizationId = __.OrganizationId.Read()
              PartnerSolutionId = __.PartnerSolutionId.Read()
              State = __.State.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PartnerSolutionOrganizationProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type PartnerSolutionOrganizationPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PartnerSolutionProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type PartnerSolutionPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PerfTrace =
        { Duration: double
          Id: System.Guid
          OrganizationId: Option<System.Guid>
          PerfTest: Option<string>
          Request: Option<string>
          [<SqlHydra.ProviderDbType("DateTime")>]
          Timestamp: System.DateTime
          TraceXml: Option<string>
          IsDeleted: bool }

    type PerfTraceReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Duration = RequiredColumn(reader, getOrdinal, reader.GetDouble, "Duration")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.OrganizationId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "OrganizationId")
        member __.PerfTest = OptionalColumn(reader, getOrdinal, reader.GetString, "PerfTest")
        member __.Request = OptionalColumn(reader, getOrdinal, reader.GetString, "Request")
        member __.Timestamp = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "Timestamp")
        member __.TraceXml = OptionalColumn(reader, getOrdinal, reader.GetString, "TraceXml")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Duration = __.Duration.Read()
              Id = __.Id.Read()
              OrganizationId = __.OrganizationId.Read()
              PerfTest = __.PerfTest.Read()
              Request = __.Request.Read()
              Timestamp = __.Timestamp.Read()
              TraceXml = __.TraceXml.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PerfTraceProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type PerfTracePropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PluginPublishers =
        { FullyQualifiedName: Option<string>
          Id: System.Guid
          PublicKeyToken: Option<string>
          TrustLevel: int
          UniqueifierId: Option<System.Guid>
          IsDeleted: bool }

    type PluginPublishersReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.FullyQualifiedName = OptionalColumn(reader, getOrdinal, reader.GetString, "FullyQualifiedName")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.PublicKeyToken = OptionalColumn(reader, getOrdinal, reader.GetString, "PublicKeyToken")
        member __.TrustLevel = RequiredColumn(reader, getOrdinal, reader.GetInt32, "TrustLevel")
        member __.UniqueifierId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueifierId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { FullyQualifiedName = __.FullyQualifiedName.Read()
              Id = __.Id.Read()
              PublicKeyToken = __.PublicKeyToken.Read()
              TrustLevel = __.TrustLevel.Read()
              UniqueifierId = __.UniqueifierId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PluginPublishersProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type PluginPublishersPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Privilege =
        { Id: System.Guid
          Name: string
          UniqueifierId: Option<System.Guid>
          IsDeleted: bool }

    type PrivilegeReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.UniqueifierId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueifierId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Id = __.Id.Read()
              Name = __.Name.Read()
              UniqueifierId = __.UniqueifierId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type PrivilegeProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type PrivilegePropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ReservedNames =
        { ReservedName: string
          ReservedReason: int
          SubstringSearch: bool
          IsDeleted: bool }

    type ReservedNamesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ReservedName = RequiredColumn(reader, getOrdinal, reader.GetString, "ReservedName")
        member __.ReservedReason = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ReservedReason")
        member __.SubstringSearch = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "SubstringSearch")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { ReservedName = __.ReservedName.Read()
              ReservedReason = __.ReservedReason.Read()
              SubstringSearch = __.SubstringSearch.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.ReservedName.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ReservedNamesProperties =
        { ReservedName: string
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type ReservedNamesPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ReservedName = RequiredColumn(reader, getOrdinal, reader.GetString, "ReservedName")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { ReservedName = __.ReservedName.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.ReservedName.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ReservedReasonType =
        { ReasonCode: int
          ReasonName: string
          IsDeleted: bool }

    type ReservedReasonTypeReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ReasonCode = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ReasonCode")
        member __.ReasonName = RequiredColumn(reader, getOrdinal, reader.GetString, "ReasonName")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { ReasonCode = __.ReasonCode.Read()
              ReasonName = __.ReasonName.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.ReasonCode.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ReservedReasonTypeProperties =
        { ReasonCode: int
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type ReservedReasonTypePropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ReasonCode = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ReasonCode")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { ReasonCode = __.ReasonCode.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.ReasonCode.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ScaleGroupNotification =
        { [<SqlHydra.ProviderDbType("DateTime")>]
          CreatedOn: System.DateTime
          EventData: Option<string>
          EventId: int
          Id: System.Guid
          OrganizationId: System.Guid
          IsDeleted: bool }

    type ScaleGroupNotificationReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CreatedOn = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "CreatedOn")
        member __.EventData = OptionalColumn(reader, getOrdinal, reader.GetString, "EventData")
        member __.EventId = RequiredColumn(reader, getOrdinal, reader.GetInt32, "EventId")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.OrganizationId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "OrganizationId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { CreatedOn = __.CreatedOn.Read()
              EventData = __.EventData.Read()
              EventId = __.EventId.Read()
              Id = __.Id.Read()
              OrganizationId = __.OrganizationId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ScaleGroupNotificationProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type ScaleGroupNotificationPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ScaleGroupOrganizationMaintenanceJobs =
        { [<SqlHydra.ProviderDbType("DateTime")>]
          CreatedOn: System.DateTime
          Enabled: bool
          ExecutionTime: Option<double>
          HostId: Option<string>
          Id: System.Guid
          JobParameters: Option<string>
          LastResultCode: int
          LastResultData: Option<string>
          [<SqlHydra.ProviderDbType("DateTime")>]
          LastRunTime: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          MaintenanceWindowEndTime: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          MaintenanceWindowStartTime: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedOn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          NextRunTime: Option<System.DateTime>
          OperationType: int
          OrganizationId: System.Guid
          RecurrencePattern: string
          [<SqlHydra.ProviderDbType("DateTime")>]
          RecurrenceStartTime: System.DateTime
          [<SqlHydra.ProviderDbType("DateTime")>]
          StartedOn: Option<System.DateTime>
          State: int
          TargetServer: Option<string>
          IsDeleted: bool }

    type ScaleGroupOrganizationMaintenanceJobsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CreatedOn = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "CreatedOn")
        member __.Enabled = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "Enabled")
        member __.ExecutionTime = OptionalColumn(reader, getOrdinal, reader.GetDouble, "ExecutionTime")
        member __.HostId = OptionalColumn(reader, getOrdinal, reader.GetString, "HostId")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.JobParameters = OptionalColumn(reader, getOrdinal, reader.GetString, "JobParameters")
        member __.LastResultCode = RequiredColumn(reader, getOrdinal, reader.GetInt32, "LastResultCode")
        member __.LastResultData = OptionalColumn(reader, getOrdinal, reader.GetString, "LastResultData")
        member __.LastRunTime = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "LastRunTime")
        member __.MaintenanceWindowEndTime = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "MaintenanceWindowEndTime")
        member __.MaintenanceWindowStartTime = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "MaintenanceWindowStartTime")
        member __.ModifiedOn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedOn")
        member __.NextRunTime = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "NextRunTime")
        member __.OperationType = RequiredColumn(reader, getOrdinal, reader.GetInt32, "OperationType")
        member __.OrganizationId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "OrganizationId")
        member __.RecurrencePattern = RequiredColumn(reader, getOrdinal, reader.GetString, "RecurrencePattern")
        member __.RecurrenceStartTime = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "RecurrenceStartTime")
        member __.StartedOn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "StartedOn")
        member __.State = RequiredColumn(reader, getOrdinal, reader.GetInt32, "State")
        member __.TargetServer = OptionalColumn(reader, getOrdinal, reader.GetString, "TargetServer")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { CreatedOn = __.CreatedOn.Read()
              Enabled = __.Enabled.Read()
              ExecutionTime = __.ExecutionTime.Read()
              HostId = __.HostId.Read()
              Id = __.Id.Read()
              JobParameters = __.JobParameters.Read()
              LastResultCode = __.LastResultCode.Read()
              LastResultData = __.LastResultData.Read()
              LastRunTime = __.LastRunTime.Read()
              MaintenanceWindowEndTime = __.MaintenanceWindowEndTime.Read()
              MaintenanceWindowStartTime = __.MaintenanceWindowStartTime.Read()
              ModifiedOn = __.ModifiedOn.Read()
              NextRunTime = __.NextRunTime.Read()
              OperationType = __.OperationType.Read()
              OrganizationId = __.OrganizationId.Read()
              RecurrencePattern = __.RecurrencePattern.Read()
              RecurrenceStartTime = __.RecurrenceStartTime.Read()
              StartedOn = __.StartedOn.Read()
              State = __.State.Read()
              TargetServer = __.TargetServer.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ScaleGroupOrganizationMaintenanceJobsProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type ScaleGroupOrganizationMaintenanceJobsPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SecurityRole =
        { Id: System.Guid
          Name: string
          UniqueifierId: Option<System.Guid>
          IsDeleted: bool }

    type SecurityRoleReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.UniqueifierId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueifierId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Id = __.Id.Read()
              Name = __.Name.Read()
              UniqueifierId = __.UniqueifierId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SecurityRolePrivileges =
        { Id: System.Guid
          PrivilegeId: System.Guid
          SecurityRoleId: System.Guid
          IsDeleted: bool }

    type SecurityRolePrivilegesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.PrivilegeId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "PrivilegeId")
        member __.SecurityRoleId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "SecurityRoleId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Id = __.Id.Read()
              PrivilegeId = __.PrivilegeId.Read()
              SecurityRoleId = __.SecurityRoleId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SecurityRolePrivilegesProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type SecurityRolePrivilegesPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SecurityRoleProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type SecurityRolePropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type Server =
        { DatacenterId: Option<System.Guid>
          FullName: Option<string>
          Id: System.Guid
          Name: string
          PodId: Option<System.Guid>
          Roles: int
          ScaleGroupId: Option<System.Guid>
          State: int
          StorageGroupId: Option<System.Guid>
          UniqueifierId: Option<System.Guid>
          Version: string
          IsDeleted: bool }

    type ServerReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.DatacenterId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "DatacenterId")
        member __.FullName = OptionalColumn(reader, getOrdinal, reader.GetString, "FullName")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.PodId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "PodId")
        member __.Roles = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Roles")
        member __.ScaleGroupId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "ScaleGroupId")
        member __.State = RequiredColumn(reader, getOrdinal, reader.GetInt32, "State")
        member __.StorageGroupId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "StorageGroupId")
        member __.UniqueifierId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueifierId")
        member __.Version = RequiredColumn(reader, getOrdinal, reader.GetString, "Version")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { DatacenterId = __.DatacenterId.Read()
              FullName = __.FullName.Read()
              Id = __.Id.Read()
              Name = __.Name.Read()
              PodId = __.PodId.Read()
              Roles = __.Roles.Read()
              ScaleGroupId = __.ScaleGroupId.Read()
              State = __.State.Read()
              StorageGroupId = __.StorageGroupId.Read()
              UniqueifierId = __.UniqueifierId.Read()
              Version = __.Version.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ServerProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type ServerPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ServerSettings = { Id: System.Guid; IsDeleted: bool }

    type ServerSettingsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Id = __.Id.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type ServerSettingsProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type ServerSettingsPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SiteLock =
        { [<SqlHydra.ProviderDbType("DateTime")>]
          ModifiedOn: System.DateTime
          Name: string
          Owner: Option<string>
          IsDeleted: bool }

    type SiteLockReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ModifiedOn = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "ModifiedOn")
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.Owner = OptionalColumn(reader, getOrdinal, reader.GetString, "Owner")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { ModifiedOn = __.ModifiedOn.Read()
              Name = __.Name.Read()
              Owner = __.Owner.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Name.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SiteLockProperties =
        { Name: string
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type SiteLockPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Name = RequiredColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Name = __.Name.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Name.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SqlGovernorClientConfiguration =
        { [<SqlHydra.ProviderDbType("DateTime")>]
          LastUpdatedOn: Option<System.DateTime>
          SqlServerName: string
          TicketBrokerId: System.Guid
          TicketBrokerServerName: string
          TicketBrokerServerRole: Option<string>
          TicketsAllocated: Option<int>
          IsDeleted: bool }

    type SqlGovernorClientConfigurationReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.LastUpdatedOn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "LastUpdatedOn")
        member __.SqlServerName = RequiredColumn(reader, getOrdinal, reader.GetString, "SqlServerName")
        member __.TicketBrokerId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "TicketBrokerId")
        member __.TicketBrokerServerName = RequiredColumn(reader, getOrdinal, reader.GetString, "TicketBrokerServerName")
        member __.TicketBrokerServerRole = OptionalColumn(reader, getOrdinal, reader.GetString, "TicketBrokerServerRole")
        member __.TicketsAllocated = OptionalColumn(reader, getOrdinal, reader.GetInt32, "TicketsAllocated")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { LastUpdatedOn = __.LastUpdatedOn.Read()
              SqlServerName = __.SqlServerName.Read()
              TicketBrokerId = __.TicketBrokerId.Read()
              TicketBrokerServerName = __.TicketBrokerServerName.Read()
              TicketBrokerServerRole = __.TicketBrokerServerRole.Read()
              TicketsAllocated = __.TicketsAllocated.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.TicketBrokerId.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SqlGovernorClientConfigurationProperties =
        { TicketBrokerId: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type SqlGovernorClientConfigurationPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.TicketBrokerId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "TicketBrokerId")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { TicketBrokerId = __.TicketBrokerId.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.TicketBrokerId.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SqlGovernorRequests =
        { [<SqlHydra.ProviderDbType("DateTime")>]
          CreatedOn: System.DateTime
          InnerRequestName: string
          OrganizationId: System.Guid
          PlatformServerName: string
          Priority: int
          RequestId: System.Guid
          RequestName: string
          RequestStatus: int
          SqlServerName: string
          TicketCost: int
          [<SqlHydra.ProviderDbType("DateTime")>]
          UpdatedOn: System.DateTime
          UserId: System.Guid
          IsDeleted: bool }

    type SqlGovernorRequestsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CreatedOn = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "CreatedOn")
        member __.InnerRequestName = RequiredColumn(reader, getOrdinal, reader.GetString, "InnerRequestName")
        member __.OrganizationId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "OrganizationId")
        member __.PlatformServerName = RequiredColumn(reader, getOrdinal, reader.GetString, "PlatformServerName")
        member __.Priority = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Priority")
        member __.RequestId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "RequestId")
        member __.RequestName = RequiredColumn(reader, getOrdinal, reader.GetString, "RequestName")
        member __.RequestStatus = RequiredColumn(reader, getOrdinal, reader.GetInt32, "RequestStatus")
        member __.SqlServerName = RequiredColumn(reader, getOrdinal, reader.GetString, "SqlServerName")
        member __.TicketCost = RequiredColumn(reader, getOrdinal, reader.GetInt32, "TicketCost")
        member __.UpdatedOn = RequiredColumn(reader, getOrdinal, reader.GetDateTime, "UpdatedOn")
        member __.UserId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "UserId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { CreatedOn = __.CreatedOn.Read()
              InnerRequestName = __.InnerRequestName.Read()
              OrganizationId = __.OrganizationId.Read()
              PlatformServerName = __.PlatformServerName.Read()
              Priority = __.Priority.Read()
              RequestId = __.RequestId.Read()
              RequestName = __.RequestName.Read()
              RequestStatus = __.RequestStatus.Read()
              SqlServerName = __.SqlServerName.Read()
              TicketCost = __.TicketCost.Read()
              UpdatedOn = __.UpdatedOn.Read()
              UserId = __.UserId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.RequestId.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SqlGovernorRequestsProperties =
        { RequestId: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type SqlGovernorRequestsPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.RequestId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "RequestId")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { RequestId = __.RequestId.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.RequestId.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SqlGovernorServiceCategoryDescription =
        { Id: System.Guid
          MaxActiveRequests: Option<int>
          Priority: Option<int>
          ServiceCategoryName: string
          TicketCost: Option<int>
          Timeout: Option<int>
          ValidForInstantGrant: Option<bool>
          IsDeleted: bool }

    type SqlGovernorServiceCategoryDescriptionReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.MaxActiveRequests = OptionalColumn(reader, getOrdinal, reader.GetInt32, "MaxActiveRequests")
        member __.Priority = OptionalColumn(reader, getOrdinal, reader.GetInt32, "Priority")
        member __.ServiceCategoryName = RequiredColumn(reader, getOrdinal, reader.GetString, "ServiceCategoryName")
        member __.TicketCost = OptionalColumn(reader, getOrdinal, reader.GetInt32, "TicketCost")
        member __.Timeout = OptionalColumn(reader, getOrdinal, reader.GetInt32, "Timeout")
        member __.ValidForInstantGrant = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "ValidForInstantGrant")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Id = __.Id.Read()
              MaxActiveRequests = __.MaxActiveRequests.Read()
              Priority = __.Priority.Read()
              ServiceCategoryName = __.ServiceCategoryName.Read()
              TicketCost = __.TicketCost.Read()
              Timeout = __.Timeout.Read()
              ValidForInstantGrant = __.ValidForInstantGrant.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SqlGovernorServiceCategoryDescriptionProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type SqlGovernorServiceCategoryDescriptionPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SqlGovernorServiceDescription =
        { Exclusivity: Option<int>
          Id: System.Guid
          MaxEnqueued: Option<int>
          NumberConcurrent: Option<int>
          Priority: Option<int>
          ServiceCategoryId: System.Guid
          ServiceGroupName: Option<string>
          ServiceName: string
          TicketCost: Option<int>
          Timeout: Option<int>
          ValidForInstantGrant: Option<bool>
          IsDeleted: bool }

    type SqlGovernorServiceDescriptionReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Exclusivity = OptionalColumn(reader, getOrdinal, reader.GetInt32, "Exclusivity")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.MaxEnqueued = OptionalColumn(reader, getOrdinal, reader.GetInt32, "MaxEnqueued")
        member __.NumberConcurrent = OptionalColumn(reader, getOrdinal, reader.GetInt32, "NumberConcurrent")
        member __.Priority = OptionalColumn(reader, getOrdinal, reader.GetInt32, "Priority")
        member __.ServiceCategoryId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "ServiceCategoryId")
        member __.ServiceGroupName = OptionalColumn(reader, getOrdinal, reader.GetString, "ServiceGroupName")
        member __.ServiceName = RequiredColumn(reader, getOrdinal, reader.GetString, "ServiceName")
        member __.TicketCost = OptionalColumn(reader, getOrdinal, reader.GetInt32, "TicketCost")
        member __.Timeout = OptionalColumn(reader, getOrdinal, reader.GetInt32, "Timeout")
        member __.ValidForInstantGrant = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "ValidForInstantGrant")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Exclusivity = __.Exclusivity.Read()
              Id = __.Id.Read()
              MaxEnqueued = __.MaxEnqueued.Read()
              NumberConcurrent = __.NumberConcurrent.Read()
              Priority = __.Priority.Read()
              ServiceCategoryId = __.ServiceCategoryId.Read()
              ServiceGroupName = __.ServiceGroupName.Read()
              ServiceName = __.ServiceName.Read()
              TicketCost = __.TicketCost.Read()
              Timeout = __.Timeout.Read()
              ValidForInstantGrant = __.ValidForInstantGrant.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SqlGovernorServiceDescriptionProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type SqlGovernorServiceDescriptionPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SqlGovernorServiceGroupDescription =
        { Exclusivity: int
          Id: System.Guid
          MaxEnqueued: Option<int>
          NumberConcurrent: Option<int>
          ServiceGroupName: string
          IsDeleted: bool }

    type SqlGovernorServiceGroupDescriptionReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Exclusivity = RequiredColumn(reader, getOrdinal, reader.GetInt32, "Exclusivity")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.MaxEnqueued = OptionalColumn(reader, getOrdinal, reader.GetInt32, "MaxEnqueued")
        member __.NumberConcurrent = OptionalColumn(reader, getOrdinal, reader.GetInt32, "NumberConcurrent")
        member __.ServiceGroupName = RequiredColumn(reader, getOrdinal, reader.GetString, "ServiceGroupName")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Exclusivity = __.Exclusivity.Read()
              Id = __.Id.Read()
              MaxEnqueued = __.MaxEnqueued.Read()
              NumberConcurrent = __.NumberConcurrent.Read()
              ServiceGroupName = __.ServiceGroupName.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SqlGovernorServiceGroupDescriptionProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type SqlGovernorServiceGroupDescriptionPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SqlGovernorSqlServers =
        { Multiplier: Option<double>
          ServerName: string
          SqlServerConfigurationId: System.Guid
          IsDeleted: bool }

    type SqlGovernorSqlServersReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Multiplier = OptionalColumn(reader, getOrdinal, reader.GetDouble, "Multiplier")
        member __.ServerName = RequiredColumn(reader, getOrdinal, reader.GetString, "ServerName")
        member __.SqlServerConfigurationId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "SqlServerConfigurationId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Multiplier = __.Multiplier.Read()
              ServerName = __.ServerName.Read()
              SqlServerConfigurationId = __.SqlServerConfigurationId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.ServerName.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SqlGovernorSqlServersConfig =
        { CPUActivityOverloadThreshold: int
          DiskIOActivityOverloadThreshold: int
          QueueOccupancyThreshold: int
          SqlServerConfigurationId: System.Guid
          TicketBucketSize: int
          IsDeleted: bool }

    type SqlGovernorSqlServersConfigReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CPUActivityOverloadThreshold = RequiredColumn(reader, getOrdinal, reader.GetInt32, "CPUActivityOverloadThreshold")
        member __.DiskIOActivityOverloadThreshold = RequiredColumn(reader, getOrdinal, reader.GetInt32, "DiskIOActivityOverloadThreshold")
        member __.QueueOccupancyThreshold = RequiredColumn(reader, getOrdinal, reader.GetInt32, "QueueOccupancyThreshold")
        member __.SqlServerConfigurationId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "SqlServerConfigurationId")
        member __.TicketBucketSize = RequiredColumn(reader, getOrdinal, reader.GetInt32, "TicketBucketSize")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { CPUActivityOverloadThreshold = __.CPUActivityOverloadThreshold.Read()
              DiskIOActivityOverloadThreshold = __.DiskIOActivityOverloadThreshold.Read()
              QueueOccupancyThreshold = __.QueueOccupancyThreshold.Read()
              SqlServerConfigurationId = __.SqlServerConfigurationId.Read()
              TicketBucketSize = __.TicketBucketSize.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.SqlServerConfigurationId.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SqlGovernorSqlServersConfigProperties =
        { SqlServerConfigurationId: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type SqlGovernorSqlServersConfigPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.SqlServerConfigurationId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "SqlServerConfigurationId")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { SqlServerConfigurationId = __.SqlServerConfigurationId.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.SqlServerConfigurationId.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SqlGovernorSqlServersProperties =
        { ServerName: string
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type SqlGovernorSqlServersPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ServerName = RequiredColumn(reader, getOrdinal, reader.GetString, "ServerName")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { ServerName = __.ServerName.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.ServerName.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SystemUser =
        { DefaultOrganizationId: System.Guid
          Id: System.Guid
          IsDisabled: Option<bool>
          Name: Option<string>
          IsDeleted: bool }

    type SystemUserReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.DefaultOrganizationId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "DefaultOrganizationId")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.IsDisabled = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "IsDisabled")
        member __.Name = OptionalColumn(reader, getOrdinal, reader.GetString, "Name")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { DefaultOrganizationId = __.DefaultOrganizationId.Read()
              Id = __.Id.Read()
              IsDisabled = __.IsDisabled.Read()
              Name = __.Name.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SystemUserAuthentication =
        { AuthInfo: Option<string>
          Id: System.Guid
          UserId: System.Guid
          IsDeleted: bool }

    type SystemUserAuthenticationReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.AuthInfo = OptionalColumn(reader, getOrdinal, reader.GetString, "AuthInfo")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.UserId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "UserId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { AuthInfo = __.AuthInfo.Read()
              Id = __.Id.Read()
              UserId = __.UserId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SystemUserAuthenticationProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type SystemUserAuthenticationPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SystemUserOrganizations =
        { CrmUserId: System.Guid
          DirectoryObjectId: Option<System.Guid>
          Id: System.Guid
          IsDisabled: Option<bool>
          IsLicensed: Option<bool>
          LastAccessServer: Option<string>
          [<SqlHydra.ProviderDbType("DateTime")>]
          LastAccessTime: Option<System.DateTime>
          OrganizationId: System.Guid
          UniqueifierId: Option<System.Guid>
          UserId: System.Guid
          IsDeleted: bool }

    type SystemUserOrganizationsReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.CrmUserId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "CrmUserId")
        member __.DirectoryObjectId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "DirectoryObjectId")
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.IsDisabled = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "IsDisabled")
        member __.IsLicensed = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "IsLicensed")
        member __.LastAccessServer = OptionalColumn(reader, getOrdinal, reader.GetString, "LastAccessServer")
        member __.LastAccessTime = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "LastAccessTime")
        member __.OrganizationId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "OrganizationId")
        member __.UniqueifierId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueifierId")
        member __.UserId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "UserId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { CrmUserId = __.CrmUserId.Read()
              DirectoryObjectId = __.DirectoryObjectId.Read()
              Id = __.Id.Read()
              IsDisabled = __.IsDisabled.Read()
              IsLicensed = __.IsLicensed.Read()
              LastAccessServer = __.LastAccessServer.Read()
              LastAccessTime = __.LastAccessTime.Read()
              OrganizationId = __.OrganizationId.Read()
              UniqueifierId = __.UniqueifierId.Read()
              UserId = __.UserId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SystemUserOrganizationsProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type SystemUserOrganizationsPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SystemUserProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type SystemUserPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SystemUserRoles =
        { Id: System.Guid
          SecurityRoleId: System.Guid
          SystemUserId: System.Guid
          UniqueifierId: Option<System.Guid>
          IsDeleted: bool }

    type SystemUserRolesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.SecurityRoleId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "SecurityRoleId")
        member __.SystemUserId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "SystemUserId")
        member __.UniqueifierId = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueifierId")
        member __.IsDeleted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "IsDeleted")

        member __.Read() =
            { Id = __.Id.Read()
              SecurityRoleId = __.SecurityRoleId.Read()
              SystemUserId = __.SystemUserId.Read()
              UniqueifierId = __.UniqueifierId.Read()
              IsDeleted = __.IsDeleted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type SystemUserRolesProperties =
        { Id: System.Guid
          ColumnName: string
          BigIntColumn: Option<int64>
          IntColumn: Option<int>
          SmallIntColumn: Option<int16>
          TinyIntColumn: Option<byte>
          BitColumn: Option<bool>
          FloatColumn: Option<double>
          [<SqlHydra.ProviderDbType("DateTime")>]
          DateTimeColumn: Option<System.DateTime>
          [<SqlHydra.ProviderDbType("DateTime")>]
          SmallDateTimeColumn: Option<System.DateTime>
          NVarCharColumn: Option<string>
          UniqueIdentifierColumn: Option<System.Guid>
          VarBinaryColumn: Option<byte []>
          Encrypted: Option<bool> }

    type SystemUserRolesPropertiesReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.Id = RequiredColumn(reader, getOrdinal, reader.GetGuid, "Id")
        member __.ColumnName = RequiredColumn(reader, getOrdinal, reader.GetString, "ColumnName")
        member __.BigIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt64, "BigIntColumn")
        member __.IntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt32, "IntColumn")
        member __.SmallIntColumn = OptionalColumn(reader, getOrdinal, reader.GetInt16, "SmallIntColumn")
        member __.TinyIntColumn = OptionalColumn(reader, getOrdinal, reader.GetByte, "TinyIntColumn")
        member __.BitColumn = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "BitColumn")
        member __.FloatColumn = OptionalColumn(reader, getOrdinal, reader.GetDouble, "FloatColumn")
        member __.DateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "DateTimeColumn")
        member __.SmallDateTimeColumn = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "SmallDateTimeColumn")
        member __.NVarCharColumn = OptionalColumn(reader, getOrdinal, reader.GetString, "NVarCharColumn")
        member __.UniqueIdentifierColumn = OptionalColumn(reader, getOrdinal, reader.GetGuid, "UniqueIdentifierColumn")
        member __.VarBinaryColumn = OptionalBinaryColumn(reader, getOrdinal, reader.GetValue, "VarBinaryColumn")
        member __.Encrypted = OptionalColumn(reader, getOrdinal, reader.GetBoolean, "Encrypted")

        member __.Read() =
            { Id = __.Id.Read()
              ColumnName = __.ColumnName.Read()
              BigIntColumn = __.BigIntColumn.Read()
              IntColumn = __.IntColumn.Read()
              SmallIntColumn = __.SmallIntColumn.Read()
              TinyIntColumn = __.TinyIntColumn.Read()
              BitColumn = __.BitColumn.Read()
              FloatColumn = __.FloatColumn.Read()
              DateTimeColumn = __.DateTimeColumn.Read()
              SmallDateTimeColumn = __.SmallDateTimeColumn.Read()
              NVarCharColumn = __.NVarCharColumn.Read()
              UniqueIdentifierColumn = __.UniqueIdentifierColumn.Read()
              VarBinaryColumn = __.VarBinaryColumn.Read()
              Encrypted = __.Encrypted.Read() }

        member __.ReadIfNotNull() =
            if __.Id.IsNull() then None else Some(__.Read())

    [<CLIMutable>]
    type UpgradeActionTracker =
        { ActionId: System.Guid
          UpgradeToVersionNumber: Option<string>
          ExecutionOrder: int
          WasExecuted: bool
          ActionName: Option<string>
          Description: Option<string>
          ExecutionTime: Option<string>
          HashFile: Option<string>
          HashValue: Option<string>
          [<SqlHydra.ProviderDbType("DateTime")>]
          CreatedOnUtc: Option<System.DateTime> }

    type UpgradeActionTrackerReader(reader: Microsoft.Data.SqlClient.SqlDataReader, getOrdinal) =
        member __.ActionId = RequiredColumn(reader, getOrdinal, reader.GetGuid, "ActionId")
        member __.UpgradeToVersionNumber = OptionalColumn(reader, getOrdinal, reader.GetString, "UpgradeToVersionNumber")
        member __.ExecutionOrder = RequiredColumn(reader, getOrdinal, reader.GetInt32, "ExecutionOrder")
        member __.WasExecuted = RequiredColumn(reader, getOrdinal, reader.GetBoolean, "WasExecuted")
        member __.ActionName = OptionalColumn(reader, getOrdinal, reader.GetString, "ActionName")
        member __.Description = OptionalColumn(reader, getOrdinal, reader.GetString, "Description")
        member __.ExecutionTime = OptionalColumn(reader, getOrdinal, reader.GetString, "ExecutionTime")
        member __.HashFile = OptionalColumn(reader, getOrdinal, reader.GetString, "HashFile")
        member __.HashValue = OptionalColumn(reader, getOrdinal, reader.GetString, "HashValue")
        member __.CreatedOnUtc = OptionalColumn(reader, getOrdinal, reader.GetDateTime, "CreatedOnUtc")

        member __.Read() =
            { ActionId = __.ActionId.Read()
              UpgradeToVersionNumber = __.UpgradeToVersionNumber.Read()
              ExecutionOrder = __.ExecutionOrder.Read()
              WasExecuted = __.WasExecuted.Read()
              ActionName = __.ActionName.Read()
              Description = __.Description.Read()
              ExecutionTime = __.ExecutionTime.Read()
              HashFile = __.HashFile.Read()
              HashValue = __.HashValue.Read()
              CreatedOnUtc = __.CreatedOnUtc.Read() }

        member __.ReadIfNotNull() =
            if __.ActionId.IsNull() then None else Some(__.Read())

type HydraReader(reader: Microsoft.Data.SqlClient.SqlDataReader) =
    let mutable accFieldCount = 0
    let buildGetOrdinal fieldCount =
        let dictionary = 
            [0..reader.FieldCount-1] 
            |> List.map (fun i -> reader.GetName(i), i)
            |> List.sortBy snd
            |> List.skip accFieldCount
            |> List.take fieldCount
            |> dict
        accFieldCount <- accFieldCount + fieldCount
        fun col -> dictionary.Item col
        
    let lazydboAuthenticationSettings = lazy (dbo.AuthenticationSettingsReader(reader, buildGetOrdinal 3))
    let lazydboAuthenticationSettingsProperties = lazy (dbo.AuthenticationSettingsPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboAuthenticationSettingsV2 = lazy (dbo.AuthenticationSettingsV2Reader(reader, buildGetOrdinal 3))
    let lazydboAuthenticationSettingsV2Properties = lazy (dbo.AuthenticationSettingsV2PropertiesReader(reader, buildGetOrdinal 14))
    let lazydboCertificates = lazy (dbo.CertificatesReader(reader, buildGetOrdinal 9))
    let lazydboCertificatesProperties = lazy (dbo.CertificatesPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboClientPatchContainedInfo = lazy (dbo.ClientPatchContainedInfoReader(reader, buildGetOrdinal 4))
    let lazydboClientPatchContainedInfoProperties = lazy (dbo.ClientPatchContainedInfoPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboClientPatchDetails = lazy (dbo.ClientPatchDetailsReader(reader, buildGetOrdinal 3))
    let lazydboClientPatchDetailsProperties = lazy (dbo.ClientPatchDetailsPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboClientPatchRequiredInfo = lazy (dbo.ClientPatchRequiredInfoReader(reader, buildGetOrdinal 4))
    let lazydboClientPatchRequiredInfoProperties = lazy (dbo.ClientPatchRequiredInfoPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboConfigSettings = lazy (dbo.ConfigSettingsReader(reader, buildGetOrdinal 18))
    let lazydboConfigSettingsProperties = lazy (dbo.ConfigSettingsPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboConfigurationMetadata = lazy (dbo.ConfigurationMetadataReader(reader, buildGetOrdinal 5))
    let lazydboCrmKey = lazy (dbo.CrmKeyReader(reader, buildGetOrdinal 6))
    let lazydboCrmKeyProperties = lazy (dbo.CrmKeyPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboCrmKeySetting = lazy (dbo.CrmKeySettingReader(reader, buildGetOrdinal 7))
    let lazydboCrmKeySettingProperties = lazy (dbo.CrmKeySettingPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboDBUpdateInstallInfo = lazy (dbo.DBUpdateInstallInfoReader(reader, buildGetOrdinal 6))
    let lazydboDataEncryptionKey = lazy (dbo.DataEncryptionKeyReader(reader, buildGetOrdinal 4))
    let lazydboDataEncryptionKeyProperties = lazy (dbo.DataEncryptionKeyPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboDeployment = lazy (dbo.DeploymentReader(reader, buildGetOrdinal 3))
    let lazydboDeploymentProperties = lazy (dbo.DeploymentPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboExternalKey = lazy (dbo.ExternalKeyReader(reader, buildGetOrdinal 3))
    let lazydboExternalKeyProperties = lazy (dbo.ExternalKeyPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboFeature = lazy (dbo.FeatureReader(reader, buildGetOrdinal 5))
    let lazydboFeatureAccessRightMap = lazy (dbo.FeatureAccessRightMapReader(reader, buildGetOrdinal 4))
    let lazydboFeatureAccessRightMapProperties = lazy (dbo.FeatureAccessRightMapPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboFeatureControl = lazy (dbo.FeatureControlReader(reader, buildGetOrdinal 8))
    let lazydboFeatureControlDefinition = lazy (dbo.FeatureControlDefinitionReader(reader, buildGetOrdinal 10))
    let lazydboFeatureControlDefinitionProperties = lazy (dbo.FeatureControlDefinitionPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboFeatureControlProperties = lazy (dbo.FeatureControlPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboFeatureControlVersions = lazy (dbo.FeatureControlVersionsReader(reader, buildGetOrdinal 4))
    let lazydboFeatureControlVersionsMapping = lazy (dbo.FeatureControlVersionsMappingReader(reader, buildGetOrdinal 7))
    let lazydboFeatureControlVersionsMappingProperties = lazy (dbo.FeatureControlVersionsMappingPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboFeatureControlVersionsProperties = lazy (dbo.FeatureControlVersionsPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboFeaturePrivilegeMap = lazy (dbo.FeaturePrivilegeMapReader(reader, buildGetOrdinal 5))
    let lazydboFeaturePrivilegeMapProperties = lazy (dbo.FeaturePrivilegeMapPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboFeatureProperties = lazy (dbo.FeaturePropertiesReader(reader, buildGetOrdinal 14))
    let lazydboFederationProvider = lazy (dbo.FederationProviderReader(reader, buildGetOrdinal 11))
    let lazydboFederationProviderProperties = lazy (dbo.FederationProviderPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboMonitoringResults = lazy (dbo.MonitoringResultsReader(reader, buildGetOrdinal 9))
    let lazydboMonitoringResultsProperties = lazy (dbo.MonitoringResultsPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboMonitoringSettings = lazy (dbo.MonitoringSettingsReader(reader, buildGetOrdinal 2))
    let lazydboMonitoringSettingsProperties = lazy (dbo.MonitoringSettingsPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboNotification = lazy (dbo.NotificationReader(reader, buildGetOrdinal 6))
    let lazydboNotificationProperties = lazy (dbo.NotificationPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboOrganization = lazy (dbo.OrganizationReader(reader, buildGetOrdinal 25))
    let lazydboOrganizationFeatureMap = lazy (dbo.OrganizationFeatureMapReader(reader, buildGetOrdinal 6))
    let lazydboOrganizationFeatureMapProperties = lazy (dbo.OrganizationFeatureMapPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboOrganizationMaintenanceJobs = lazy (dbo.OrganizationMaintenanceJobsReader(reader, buildGetOrdinal 15))
    let lazydboOrganizationMaintenanceJobsProperties = lazy (dbo.OrganizationMaintenanceJobsPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboOrganizationMonitoringSettings = lazy (dbo.OrganizationMonitoringSettingsReader(reader, buildGetOrdinal 3))
    let lazydboOrganizationMonitoringSettingsProperties = lazy (dbo.OrganizationMonitoringSettingsPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboOrganizationProperties = lazy (dbo.OrganizationPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboPartner = lazy (dbo.PartnerReader(reader, buildGetOrdinal 3))
    let lazydboPartnerProperties = lazy (dbo.PartnerPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboPartnerSolution = lazy (dbo.PartnerSolutionReader(reader, buildGetOrdinal 4))
    let lazydboPartnerSolutionOrganization = lazy (dbo.PartnerSolutionOrganizationReader(reader, buildGetOrdinal 5))
    let lazydboPartnerSolutionOrganizationProperties = lazy (dbo.PartnerSolutionOrganizationPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboPartnerSolutionProperties = lazy (dbo.PartnerSolutionPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboPerfTrace = lazy (dbo.PerfTraceReader(reader, buildGetOrdinal 8))
    let lazydboPerfTraceProperties = lazy (dbo.PerfTracePropertiesReader(reader, buildGetOrdinal 14))
    let lazydboPluginPublishers = lazy (dbo.PluginPublishersReader(reader, buildGetOrdinal 6))
    let lazydboPluginPublishersProperties = lazy (dbo.PluginPublishersPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboPrivilege = lazy (dbo.PrivilegeReader(reader, buildGetOrdinal 4))
    let lazydboPrivilegeProperties = lazy (dbo.PrivilegePropertiesReader(reader, buildGetOrdinal 14))
    let lazydboReservedNames = lazy (dbo.ReservedNamesReader(reader, buildGetOrdinal 4))
    let lazydboReservedNamesProperties = lazy (dbo.ReservedNamesPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboReservedReasonType = lazy (dbo.ReservedReasonTypeReader(reader, buildGetOrdinal 3))
    let lazydboReservedReasonTypeProperties = lazy (dbo.ReservedReasonTypePropertiesReader(reader, buildGetOrdinal 14))
    let lazydboScaleGroupNotification = lazy (dbo.ScaleGroupNotificationReader(reader, buildGetOrdinal 6))
    let lazydboScaleGroupNotificationProperties = lazy (dbo.ScaleGroupNotificationPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboScaleGroupOrganizationMaintenanceJobs = lazy (dbo.ScaleGroupOrganizationMaintenanceJobsReader(reader, buildGetOrdinal 21))
    let lazydboScaleGroupOrganizationMaintenanceJobsProperties = lazy (dbo.ScaleGroupOrganizationMaintenanceJobsPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboSecurityRole = lazy (dbo.SecurityRoleReader(reader, buildGetOrdinal 4))
    let lazydboSecurityRolePrivileges = lazy (dbo.SecurityRolePrivilegesReader(reader, buildGetOrdinal 4))
    let lazydboSecurityRolePrivilegesProperties = lazy (dbo.SecurityRolePrivilegesPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboSecurityRoleProperties = lazy (dbo.SecurityRolePropertiesReader(reader, buildGetOrdinal 14))
    let lazydboServer = lazy (dbo.ServerReader(reader, buildGetOrdinal 12))
    let lazydboServerProperties = lazy (dbo.ServerPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboServerSettings = lazy (dbo.ServerSettingsReader(reader, buildGetOrdinal 2))
    let lazydboServerSettingsProperties = lazy (dbo.ServerSettingsPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboSiteLock = lazy (dbo.SiteLockReader(reader, buildGetOrdinal 4))
    let lazydboSiteLockProperties = lazy (dbo.SiteLockPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboSqlGovernorClientConfiguration = lazy (dbo.SqlGovernorClientConfigurationReader(reader, buildGetOrdinal 7))
    let lazydboSqlGovernorClientConfigurationProperties = lazy (dbo.SqlGovernorClientConfigurationPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboSqlGovernorRequests = lazy (dbo.SqlGovernorRequestsReader(reader, buildGetOrdinal 13))
    let lazydboSqlGovernorRequestsProperties = lazy (dbo.SqlGovernorRequestsPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboSqlGovernorServiceCategoryDescription = lazy (dbo.SqlGovernorServiceCategoryDescriptionReader(reader, buildGetOrdinal 8))
    let lazydboSqlGovernorServiceCategoryDescriptionProperties = lazy (dbo.SqlGovernorServiceCategoryDescriptionPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboSqlGovernorServiceDescription = lazy (dbo.SqlGovernorServiceDescriptionReader(reader, buildGetOrdinal 12))
    let lazydboSqlGovernorServiceDescriptionProperties = lazy (dbo.SqlGovernorServiceDescriptionPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboSqlGovernorServiceGroupDescription = lazy (dbo.SqlGovernorServiceGroupDescriptionReader(reader, buildGetOrdinal 6))
    let lazydboSqlGovernorServiceGroupDescriptionProperties = lazy (dbo.SqlGovernorServiceGroupDescriptionPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboSqlGovernorSqlServers = lazy (dbo.SqlGovernorSqlServersReader(reader, buildGetOrdinal 4))
    let lazydboSqlGovernorSqlServersConfig = lazy (dbo.SqlGovernorSqlServersConfigReader(reader, buildGetOrdinal 6))
    let lazydboSqlGovernorSqlServersConfigProperties = lazy (dbo.SqlGovernorSqlServersConfigPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboSqlGovernorSqlServersProperties = lazy (dbo.SqlGovernorSqlServersPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboSystemUser = lazy (dbo.SystemUserReader(reader, buildGetOrdinal 5))
    let lazydboSystemUserAuthentication = lazy (dbo.SystemUserAuthenticationReader(reader, buildGetOrdinal 4))
    let lazydboSystemUserAuthenticationProperties = lazy (dbo.SystemUserAuthenticationPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboSystemUserOrganizations = lazy (dbo.SystemUserOrganizationsReader(reader, buildGetOrdinal 11))
    let lazydboSystemUserOrganizationsProperties = lazy (dbo.SystemUserOrganizationsPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboSystemUserProperties = lazy (dbo.SystemUserPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboSystemUserRoles = lazy (dbo.SystemUserRolesReader(reader, buildGetOrdinal 5))
    let lazydboSystemUserRolesProperties = lazy (dbo.SystemUserRolesPropertiesReader(reader, buildGetOrdinal 14))
    let lazydboUpgradeActionTracker = lazy (dbo.UpgradeActionTrackerReader(reader, buildGetOrdinal 10))
    member __.``dbo.AuthenticationSettings`` = lazydboAuthenticationSettings.Value
    member __.``dbo.AuthenticationSettingsProperties`` = lazydboAuthenticationSettingsProperties.Value
    member __.``dbo.AuthenticationSettingsV2`` = lazydboAuthenticationSettingsV2.Value
    member __.``dbo.AuthenticationSettingsV2Properties`` = lazydboAuthenticationSettingsV2Properties.Value
    member __.``dbo.Certificates`` = lazydboCertificates.Value
    member __.``dbo.CertificatesProperties`` = lazydboCertificatesProperties.Value
    member __.``dbo.ClientPatchContainedInfo`` = lazydboClientPatchContainedInfo.Value
    member __.``dbo.ClientPatchContainedInfoProperties`` = lazydboClientPatchContainedInfoProperties.Value
    member __.``dbo.ClientPatchDetails`` = lazydboClientPatchDetails.Value
    member __.``dbo.ClientPatchDetailsProperties`` = lazydboClientPatchDetailsProperties.Value
    member __.``dbo.ClientPatchRequiredInfo`` = lazydboClientPatchRequiredInfo.Value
    member __.``dbo.ClientPatchRequiredInfoProperties`` = lazydboClientPatchRequiredInfoProperties.Value
    member __.``dbo.ConfigSettings`` = lazydboConfigSettings.Value
    member __.``dbo.ConfigSettingsProperties`` = lazydboConfigSettingsProperties.Value
    member __.``dbo.ConfigurationMetadata`` = lazydboConfigurationMetadata.Value
    member __.``dbo.CrmKey`` = lazydboCrmKey.Value
    member __.``dbo.CrmKeyProperties`` = lazydboCrmKeyProperties.Value
    member __.``dbo.CrmKeySetting`` = lazydboCrmKeySetting.Value
    member __.``dbo.CrmKeySettingProperties`` = lazydboCrmKeySettingProperties.Value
    member __.``dbo.DBUpdateInstallInfo`` = lazydboDBUpdateInstallInfo.Value
    member __.``dbo.DataEncryptionKey`` = lazydboDataEncryptionKey.Value
    member __.``dbo.DataEncryptionKeyProperties`` = lazydboDataEncryptionKeyProperties.Value
    member __.``dbo.Deployment`` = lazydboDeployment.Value
    member __.``dbo.DeploymentProperties`` = lazydboDeploymentProperties.Value
    member __.``dbo.ExternalKey`` = lazydboExternalKey.Value
    member __.``dbo.ExternalKeyProperties`` = lazydboExternalKeyProperties.Value
    member __.``dbo.Feature`` = lazydboFeature.Value
    member __.``dbo.FeatureAccessRightMap`` = lazydboFeatureAccessRightMap.Value
    member __.``dbo.FeatureAccessRightMapProperties`` = lazydboFeatureAccessRightMapProperties.Value
    member __.``dbo.FeatureControl`` = lazydboFeatureControl.Value
    member __.``dbo.FeatureControlDefinition`` = lazydboFeatureControlDefinition.Value
    member __.``dbo.FeatureControlDefinitionProperties`` = lazydboFeatureControlDefinitionProperties.Value
    member __.``dbo.FeatureControlProperties`` = lazydboFeatureControlProperties.Value
    member __.``dbo.FeatureControlVersions`` = lazydboFeatureControlVersions.Value
    member __.``dbo.FeatureControlVersionsMapping`` = lazydboFeatureControlVersionsMapping.Value
    member __.``dbo.FeatureControlVersionsMappingProperties`` = lazydboFeatureControlVersionsMappingProperties.Value
    member __.``dbo.FeatureControlVersionsProperties`` = lazydboFeatureControlVersionsProperties.Value
    member __.``dbo.FeaturePrivilegeMap`` = lazydboFeaturePrivilegeMap.Value
    member __.``dbo.FeaturePrivilegeMapProperties`` = lazydboFeaturePrivilegeMapProperties.Value
    member __.``dbo.FeatureProperties`` = lazydboFeatureProperties.Value
    member __.``dbo.FederationProvider`` = lazydboFederationProvider.Value
    member __.``dbo.FederationProviderProperties`` = lazydboFederationProviderProperties.Value
    member __.``dbo.MonitoringResults`` = lazydboMonitoringResults.Value
    member __.``dbo.MonitoringResultsProperties`` = lazydboMonitoringResultsProperties.Value
    member __.``dbo.MonitoringSettings`` = lazydboMonitoringSettings.Value
    member __.``dbo.MonitoringSettingsProperties`` = lazydboMonitoringSettingsProperties.Value
    member __.``dbo.Notification`` = lazydboNotification.Value
    member __.``dbo.NotificationProperties`` = lazydboNotificationProperties.Value
    member __.``dbo.Organization`` = lazydboOrganization.Value
    member __.``dbo.OrganizationFeatureMap`` = lazydboOrganizationFeatureMap.Value
    member __.``dbo.OrganizationFeatureMapProperties`` = lazydboOrganizationFeatureMapProperties.Value
    member __.``dbo.OrganizationMaintenanceJobs`` = lazydboOrganizationMaintenanceJobs.Value
    member __.``dbo.OrganizationMaintenanceJobsProperties`` = lazydboOrganizationMaintenanceJobsProperties.Value
    member __.``dbo.OrganizationMonitoringSettings`` = lazydboOrganizationMonitoringSettings.Value
    member __.``dbo.OrganizationMonitoringSettingsProperties`` = lazydboOrganizationMonitoringSettingsProperties.Value
    member __.``dbo.OrganizationProperties`` = lazydboOrganizationProperties.Value
    member __.``dbo.Partner`` = lazydboPartner.Value
    member __.``dbo.PartnerProperties`` = lazydboPartnerProperties.Value
    member __.``dbo.PartnerSolution`` = lazydboPartnerSolution.Value
    member __.``dbo.PartnerSolutionOrganization`` = lazydboPartnerSolutionOrganization.Value
    member __.``dbo.PartnerSolutionOrganizationProperties`` = lazydboPartnerSolutionOrganizationProperties.Value
    member __.``dbo.PartnerSolutionProperties`` = lazydboPartnerSolutionProperties.Value
    member __.``dbo.PerfTrace`` = lazydboPerfTrace.Value
    member __.``dbo.PerfTraceProperties`` = lazydboPerfTraceProperties.Value
    member __.``dbo.PluginPublishers`` = lazydboPluginPublishers.Value
    member __.``dbo.PluginPublishersProperties`` = lazydboPluginPublishersProperties.Value
    member __.``dbo.Privilege`` = lazydboPrivilege.Value
    member __.``dbo.PrivilegeProperties`` = lazydboPrivilegeProperties.Value
    member __.``dbo.ReservedNames`` = lazydboReservedNames.Value
    member __.``dbo.ReservedNamesProperties`` = lazydboReservedNamesProperties.Value
    member __.``dbo.ReservedReasonType`` = lazydboReservedReasonType.Value
    member __.``dbo.ReservedReasonTypeProperties`` = lazydboReservedReasonTypeProperties.Value
    member __.``dbo.ScaleGroupNotification`` = lazydboScaleGroupNotification.Value
    member __.``dbo.ScaleGroupNotificationProperties`` = lazydboScaleGroupNotificationProperties.Value
    member __.``dbo.ScaleGroupOrganizationMaintenanceJobs`` = lazydboScaleGroupOrganizationMaintenanceJobs.Value
    member __.``dbo.ScaleGroupOrganizationMaintenanceJobsProperties`` = lazydboScaleGroupOrganizationMaintenanceJobsProperties.Value
    member __.``dbo.SecurityRole`` = lazydboSecurityRole.Value
    member __.``dbo.SecurityRolePrivileges`` = lazydboSecurityRolePrivileges.Value
    member __.``dbo.SecurityRolePrivilegesProperties`` = lazydboSecurityRolePrivilegesProperties.Value
    member __.``dbo.SecurityRoleProperties`` = lazydboSecurityRoleProperties.Value
    member __.``dbo.Server`` = lazydboServer.Value
    member __.``dbo.ServerProperties`` = lazydboServerProperties.Value
    member __.``dbo.ServerSettings`` = lazydboServerSettings.Value
    member __.``dbo.ServerSettingsProperties`` = lazydboServerSettingsProperties.Value
    member __.``dbo.SiteLock`` = lazydboSiteLock.Value
    member __.``dbo.SiteLockProperties`` = lazydboSiteLockProperties.Value
    member __.``dbo.SqlGovernorClientConfiguration`` = lazydboSqlGovernorClientConfiguration.Value
    member __.``dbo.SqlGovernorClientConfigurationProperties`` = lazydboSqlGovernorClientConfigurationProperties.Value
    member __.``dbo.SqlGovernorRequests`` = lazydboSqlGovernorRequests.Value
    member __.``dbo.SqlGovernorRequestsProperties`` = lazydboSqlGovernorRequestsProperties.Value
    member __.``dbo.SqlGovernorServiceCategoryDescription`` = lazydboSqlGovernorServiceCategoryDescription.Value
    member __.``dbo.SqlGovernorServiceCategoryDescriptionProperties`` = lazydboSqlGovernorServiceCategoryDescriptionProperties.Value
    member __.``dbo.SqlGovernorServiceDescription`` = lazydboSqlGovernorServiceDescription.Value
    member __.``dbo.SqlGovernorServiceDescriptionProperties`` = lazydboSqlGovernorServiceDescriptionProperties.Value
    member __.``dbo.SqlGovernorServiceGroupDescription`` = lazydboSqlGovernorServiceGroupDescription.Value
    member __.``dbo.SqlGovernorServiceGroupDescriptionProperties`` = lazydboSqlGovernorServiceGroupDescriptionProperties.Value
    member __.``dbo.SqlGovernorSqlServers`` = lazydboSqlGovernorSqlServers.Value
    member __.``dbo.SqlGovernorSqlServersConfig`` = lazydboSqlGovernorSqlServersConfig.Value
    member __.``dbo.SqlGovernorSqlServersConfigProperties`` = lazydboSqlGovernorSqlServersConfigProperties.Value
    member __.``dbo.SqlGovernorSqlServersProperties`` = lazydboSqlGovernorSqlServersProperties.Value
    member __.``dbo.SystemUser`` = lazydboSystemUser.Value
    member __.``dbo.SystemUserAuthentication`` = lazydboSystemUserAuthentication.Value
    member __.``dbo.SystemUserAuthenticationProperties`` = lazydboSystemUserAuthenticationProperties.Value
    member __.``dbo.SystemUserOrganizations`` = lazydboSystemUserOrganizations.Value
    member __.``dbo.SystemUserOrganizationsProperties`` = lazydboSystemUserOrganizationsProperties.Value
    member __.``dbo.SystemUserProperties`` = lazydboSystemUserProperties.Value
    member __.``dbo.SystemUserRoles`` = lazydboSystemUserRoles.Value
    member __.``dbo.SystemUserRolesProperties`` = lazydboSystemUserRolesProperties.Value
    member __.``dbo.UpgradeActionTracker`` = lazydboUpgradeActionTracker.Value
    member private __.AccFieldCount with get () = accFieldCount and set (value) = accFieldCount <- value

    member private __.GetReaderByName(entity: string, isOption: bool) =
        match entity, isOption with
        | "dbo.AuthenticationSettings", false -> __.``dbo.AuthenticationSettings``.Read >> box
        | "dbo.AuthenticationSettings", true -> __.``dbo.AuthenticationSettings``.ReadIfNotNull >> box
        | "dbo.AuthenticationSettingsProperties", false -> __.``dbo.AuthenticationSettingsProperties``.Read >> box
        | "dbo.AuthenticationSettingsProperties", true -> __.``dbo.AuthenticationSettingsProperties``.ReadIfNotNull >> box
        | "dbo.AuthenticationSettingsV2", false -> __.``dbo.AuthenticationSettingsV2``.Read >> box
        | "dbo.AuthenticationSettingsV2", true -> __.``dbo.AuthenticationSettingsV2``.ReadIfNotNull >> box
        | "dbo.AuthenticationSettingsV2Properties", false -> __.``dbo.AuthenticationSettingsV2Properties``.Read >> box
        | "dbo.AuthenticationSettingsV2Properties", true -> __.``dbo.AuthenticationSettingsV2Properties``.ReadIfNotNull >> box
        | "dbo.Certificates", false -> __.``dbo.Certificates``.Read >> box
        | "dbo.Certificates", true -> __.``dbo.Certificates``.ReadIfNotNull >> box
        | "dbo.CertificatesProperties", false -> __.``dbo.CertificatesProperties``.Read >> box
        | "dbo.CertificatesProperties", true -> __.``dbo.CertificatesProperties``.ReadIfNotNull >> box
        | "dbo.ClientPatchContainedInfo", false -> __.``dbo.ClientPatchContainedInfo``.Read >> box
        | "dbo.ClientPatchContainedInfo", true -> __.``dbo.ClientPatchContainedInfo``.ReadIfNotNull >> box
        | "dbo.ClientPatchContainedInfoProperties", false -> __.``dbo.ClientPatchContainedInfoProperties``.Read >> box
        | "dbo.ClientPatchContainedInfoProperties", true -> __.``dbo.ClientPatchContainedInfoProperties``.ReadIfNotNull >> box
        | "dbo.ClientPatchDetails", false -> __.``dbo.ClientPatchDetails``.Read >> box
        | "dbo.ClientPatchDetails", true -> __.``dbo.ClientPatchDetails``.ReadIfNotNull >> box
        | "dbo.ClientPatchDetailsProperties", false -> __.``dbo.ClientPatchDetailsProperties``.Read >> box
        | "dbo.ClientPatchDetailsProperties", true -> __.``dbo.ClientPatchDetailsProperties``.ReadIfNotNull >> box
        | "dbo.ClientPatchRequiredInfo", false -> __.``dbo.ClientPatchRequiredInfo``.Read >> box
        | "dbo.ClientPatchRequiredInfo", true -> __.``dbo.ClientPatchRequiredInfo``.ReadIfNotNull >> box
        | "dbo.ClientPatchRequiredInfoProperties", false -> __.``dbo.ClientPatchRequiredInfoProperties``.Read >> box
        | "dbo.ClientPatchRequiredInfoProperties", true -> __.``dbo.ClientPatchRequiredInfoProperties``.ReadIfNotNull >> box
        | "dbo.ConfigSettings", false -> __.``dbo.ConfigSettings``.Read >> box
        | "dbo.ConfigSettings", true -> __.``dbo.ConfigSettings``.ReadIfNotNull >> box
        | "dbo.ConfigSettingsProperties", false -> __.``dbo.ConfigSettingsProperties``.Read >> box
        | "dbo.ConfigSettingsProperties", true -> __.``dbo.ConfigSettingsProperties``.ReadIfNotNull >> box
        | "dbo.ConfigurationMetadata", false -> __.``dbo.ConfigurationMetadata``.Read >> box
        | "dbo.ConfigurationMetadata", true -> __.``dbo.ConfigurationMetadata``.ReadIfNotNull >> box
        | "dbo.CrmKey", false -> __.``dbo.CrmKey``.Read >> box
        | "dbo.CrmKey", true -> __.``dbo.CrmKey``.ReadIfNotNull >> box
        | "dbo.CrmKeyProperties", false -> __.``dbo.CrmKeyProperties``.Read >> box
        | "dbo.CrmKeyProperties", true -> __.``dbo.CrmKeyProperties``.ReadIfNotNull >> box
        | "dbo.CrmKeySetting", false -> __.``dbo.CrmKeySetting``.Read >> box
        | "dbo.CrmKeySetting", true -> __.``dbo.CrmKeySetting``.ReadIfNotNull >> box
        | "dbo.CrmKeySettingProperties", false -> __.``dbo.CrmKeySettingProperties``.Read >> box
        | "dbo.CrmKeySettingProperties", true -> __.``dbo.CrmKeySettingProperties``.ReadIfNotNull >> box
        | "dbo.DBUpdateInstallInfo", false -> __.``dbo.DBUpdateInstallInfo``.Read >> box
        | "dbo.DBUpdateInstallInfo", true -> __.``dbo.DBUpdateInstallInfo``.ReadIfNotNull >> box
        | "dbo.DataEncryptionKey", false -> __.``dbo.DataEncryptionKey``.Read >> box
        | "dbo.DataEncryptionKey", true -> __.``dbo.DataEncryptionKey``.ReadIfNotNull >> box
        | "dbo.DataEncryptionKeyProperties", false -> __.``dbo.DataEncryptionKeyProperties``.Read >> box
        | "dbo.DataEncryptionKeyProperties", true -> __.``dbo.DataEncryptionKeyProperties``.ReadIfNotNull >> box
        | "dbo.Deployment", false -> __.``dbo.Deployment``.Read >> box
        | "dbo.Deployment", true -> __.``dbo.Deployment``.ReadIfNotNull >> box
        | "dbo.DeploymentProperties", false -> __.``dbo.DeploymentProperties``.Read >> box
        | "dbo.DeploymentProperties", true -> __.``dbo.DeploymentProperties``.ReadIfNotNull >> box
        | "dbo.ExternalKey", false -> __.``dbo.ExternalKey``.Read >> box
        | "dbo.ExternalKey", true -> __.``dbo.ExternalKey``.ReadIfNotNull >> box
        | "dbo.ExternalKeyProperties", false -> __.``dbo.ExternalKeyProperties``.Read >> box
        | "dbo.ExternalKeyProperties", true -> __.``dbo.ExternalKeyProperties``.ReadIfNotNull >> box
        | "dbo.Feature", false -> __.``dbo.Feature``.Read >> box
        | "dbo.Feature", true -> __.``dbo.Feature``.ReadIfNotNull >> box
        | "dbo.FeatureAccessRightMap", false -> __.``dbo.FeatureAccessRightMap``.Read >> box
        | "dbo.FeatureAccessRightMap", true -> __.``dbo.FeatureAccessRightMap``.ReadIfNotNull >> box
        | "dbo.FeatureAccessRightMapProperties", false -> __.``dbo.FeatureAccessRightMapProperties``.Read >> box
        | "dbo.FeatureAccessRightMapProperties", true -> __.``dbo.FeatureAccessRightMapProperties``.ReadIfNotNull >> box
        | "dbo.FeatureControl", false -> __.``dbo.FeatureControl``.Read >> box
        | "dbo.FeatureControl", true -> __.``dbo.FeatureControl``.ReadIfNotNull >> box
        | "dbo.FeatureControlDefinition", false -> __.``dbo.FeatureControlDefinition``.Read >> box
        | "dbo.FeatureControlDefinition", true -> __.``dbo.FeatureControlDefinition``.ReadIfNotNull >> box
        | "dbo.FeatureControlDefinitionProperties", false -> __.``dbo.FeatureControlDefinitionProperties``.Read >> box
        | "dbo.FeatureControlDefinitionProperties", true -> __.``dbo.FeatureControlDefinitionProperties``.ReadIfNotNull >> box
        | "dbo.FeatureControlProperties", false -> __.``dbo.FeatureControlProperties``.Read >> box
        | "dbo.FeatureControlProperties", true -> __.``dbo.FeatureControlProperties``.ReadIfNotNull >> box
        | "dbo.FeatureControlVersions", false -> __.``dbo.FeatureControlVersions``.Read >> box
        | "dbo.FeatureControlVersions", true -> __.``dbo.FeatureControlVersions``.ReadIfNotNull >> box
        | "dbo.FeatureControlVersionsMapping", false -> __.``dbo.FeatureControlVersionsMapping``.Read >> box
        | "dbo.FeatureControlVersionsMapping", true -> __.``dbo.FeatureControlVersionsMapping``.ReadIfNotNull >> box
        | "dbo.FeatureControlVersionsMappingProperties", false -> __.``dbo.FeatureControlVersionsMappingProperties``.Read >> box
        | "dbo.FeatureControlVersionsMappingProperties", true -> __.``dbo.FeatureControlVersionsMappingProperties``.ReadIfNotNull >> box
        | "dbo.FeatureControlVersionsProperties", false -> __.``dbo.FeatureControlVersionsProperties``.Read >> box
        | "dbo.FeatureControlVersionsProperties", true -> __.``dbo.FeatureControlVersionsProperties``.ReadIfNotNull >> box
        | "dbo.FeaturePrivilegeMap", false -> __.``dbo.FeaturePrivilegeMap``.Read >> box
        | "dbo.FeaturePrivilegeMap", true -> __.``dbo.FeaturePrivilegeMap``.ReadIfNotNull >> box
        | "dbo.FeaturePrivilegeMapProperties", false -> __.``dbo.FeaturePrivilegeMapProperties``.Read >> box
        | "dbo.FeaturePrivilegeMapProperties", true -> __.``dbo.FeaturePrivilegeMapProperties``.ReadIfNotNull >> box
        | "dbo.FeatureProperties", false -> __.``dbo.FeatureProperties``.Read >> box
        | "dbo.FeatureProperties", true -> __.``dbo.FeatureProperties``.ReadIfNotNull >> box
        | "dbo.FederationProvider", false -> __.``dbo.FederationProvider``.Read >> box
        | "dbo.FederationProvider", true -> __.``dbo.FederationProvider``.ReadIfNotNull >> box
        | "dbo.FederationProviderProperties", false -> __.``dbo.FederationProviderProperties``.Read >> box
        | "dbo.FederationProviderProperties", true -> __.``dbo.FederationProviderProperties``.ReadIfNotNull >> box
        | "dbo.MonitoringResults", false -> __.``dbo.MonitoringResults``.Read >> box
        | "dbo.MonitoringResults", true -> __.``dbo.MonitoringResults``.ReadIfNotNull >> box
        | "dbo.MonitoringResultsProperties", false -> __.``dbo.MonitoringResultsProperties``.Read >> box
        | "dbo.MonitoringResultsProperties", true -> __.``dbo.MonitoringResultsProperties``.ReadIfNotNull >> box
        | "dbo.MonitoringSettings", false -> __.``dbo.MonitoringSettings``.Read >> box
        | "dbo.MonitoringSettings", true -> __.``dbo.MonitoringSettings``.ReadIfNotNull >> box
        | "dbo.MonitoringSettingsProperties", false -> __.``dbo.MonitoringSettingsProperties``.Read >> box
        | "dbo.MonitoringSettingsProperties", true -> __.``dbo.MonitoringSettingsProperties``.ReadIfNotNull >> box
        | "dbo.Notification", false -> __.``dbo.Notification``.Read >> box
        | "dbo.Notification", true -> __.``dbo.Notification``.ReadIfNotNull >> box
        | "dbo.NotificationProperties", false -> __.``dbo.NotificationProperties``.Read >> box
        | "dbo.NotificationProperties", true -> __.``dbo.NotificationProperties``.ReadIfNotNull >> box
        | "dbo.Organization", false -> __.``dbo.Organization``.Read >> box
        | "dbo.Organization", true -> __.``dbo.Organization``.ReadIfNotNull >> box
        | "dbo.OrganizationFeatureMap", false -> __.``dbo.OrganizationFeatureMap``.Read >> box
        | "dbo.OrganizationFeatureMap", true -> __.``dbo.OrganizationFeatureMap``.ReadIfNotNull >> box
        | "dbo.OrganizationFeatureMapProperties", false -> __.``dbo.OrganizationFeatureMapProperties``.Read >> box
        | "dbo.OrganizationFeatureMapProperties", true -> __.``dbo.OrganizationFeatureMapProperties``.ReadIfNotNull >> box
        | "dbo.OrganizationMaintenanceJobs", false -> __.``dbo.OrganizationMaintenanceJobs``.Read >> box
        | "dbo.OrganizationMaintenanceJobs", true -> __.``dbo.OrganizationMaintenanceJobs``.ReadIfNotNull >> box
        | "dbo.OrganizationMaintenanceJobsProperties", false -> __.``dbo.OrganizationMaintenanceJobsProperties``.Read >> box
        | "dbo.OrganizationMaintenanceJobsProperties", true -> __.``dbo.OrganizationMaintenanceJobsProperties``.ReadIfNotNull >> box
        | "dbo.OrganizationMonitoringSettings", false -> __.``dbo.OrganizationMonitoringSettings``.Read >> box
        | "dbo.OrganizationMonitoringSettings", true -> __.``dbo.OrganizationMonitoringSettings``.ReadIfNotNull >> box
        | "dbo.OrganizationMonitoringSettingsProperties", false -> __.``dbo.OrganizationMonitoringSettingsProperties``.Read >> box
        | "dbo.OrganizationMonitoringSettingsProperties", true -> __.``dbo.OrganizationMonitoringSettingsProperties``.ReadIfNotNull >> box
        | "dbo.OrganizationProperties", false -> __.``dbo.OrganizationProperties``.Read >> box
        | "dbo.OrganizationProperties", true -> __.``dbo.OrganizationProperties``.ReadIfNotNull >> box
        | "dbo.Partner", false -> __.``dbo.Partner``.Read >> box
        | "dbo.Partner", true -> __.``dbo.Partner``.ReadIfNotNull >> box
        | "dbo.PartnerProperties", false -> __.``dbo.PartnerProperties``.Read >> box
        | "dbo.PartnerProperties", true -> __.``dbo.PartnerProperties``.ReadIfNotNull >> box
        | "dbo.PartnerSolution", false -> __.``dbo.PartnerSolution``.Read >> box
        | "dbo.PartnerSolution", true -> __.``dbo.PartnerSolution``.ReadIfNotNull >> box
        | "dbo.PartnerSolutionOrganization", false -> __.``dbo.PartnerSolutionOrganization``.Read >> box
        | "dbo.PartnerSolutionOrganization", true -> __.``dbo.PartnerSolutionOrganization``.ReadIfNotNull >> box
        | "dbo.PartnerSolutionOrganizationProperties", false -> __.``dbo.PartnerSolutionOrganizationProperties``.Read >> box
        | "dbo.PartnerSolutionOrganizationProperties", true -> __.``dbo.PartnerSolutionOrganizationProperties``.ReadIfNotNull >> box
        | "dbo.PartnerSolutionProperties", false -> __.``dbo.PartnerSolutionProperties``.Read >> box
        | "dbo.PartnerSolutionProperties", true -> __.``dbo.PartnerSolutionProperties``.ReadIfNotNull >> box
        | "dbo.PerfTrace", false -> __.``dbo.PerfTrace``.Read >> box
        | "dbo.PerfTrace", true -> __.``dbo.PerfTrace``.ReadIfNotNull >> box
        | "dbo.PerfTraceProperties", false -> __.``dbo.PerfTraceProperties``.Read >> box
        | "dbo.PerfTraceProperties", true -> __.``dbo.PerfTraceProperties``.ReadIfNotNull >> box
        | "dbo.PluginPublishers", false -> __.``dbo.PluginPublishers``.Read >> box
        | "dbo.PluginPublishers", true -> __.``dbo.PluginPublishers``.ReadIfNotNull >> box
        | "dbo.PluginPublishersProperties", false -> __.``dbo.PluginPublishersProperties``.Read >> box
        | "dbo.PluginPublishersProperties", true -> __.``dbo.PluginPublishersProperties``.ReadIfNotNull >> box
        | "dbo.Privilege", false -> __.``dbo.Privilege``.Read >> box
        | "dbo.Privilege", true -> __.``dbo.Privilege``.ReadIfNotNull >> box
        | "dbo.PrivilegeProperties", false -> __.``dbo.PrivilegeProperties``.Read >> box
        | "dbo.PrivilegeProperties", true -> __.``dbo.PrivilegeProperties``.ReadIfNotNull >> box
        | "dbo.ReservedNames", false -> __.``dbo.ReservedNames``.Read >> box
        | "dbo.ReservedNames", true -> __.``dbo.ReservedNames``.ReadIfNotNull >> box
        | "dbo.ReservedNamesProperties", false -> __.``dbo.ReservedNamesProperties``.Read >> box
        | "dbo.ReservedNamesProperties", true -> __.``dbo.ReservedNamesProperties``.ReadIfNotNull >> box
        | "dbo.ReservedReasonType", false -> __.``dbo.ReservedReasonType``.Read >> box
        | "dbo.ReservedReasonType", true -> __.``dbo.ReservedReasonType``.ReadIfNotNull >> box
        | "dbo.ReservedReasonTypeProperties", false -> __.``dbo.ReservedReasonTypeProperties``.Read >> box
        | "dbo.ReservedReasonTypeProperties", true -> __.``dbo.ReservedReasonTypeProperties``.ReadIfNotNull >> box
        | "dbo.ScaleGroupNotification", false -> __.``dbo.ScaleGroupNotification``.Read >> box
        | "dbo.ScaleGroupNotification", true -> __.``dbo.ScaleGroupNotification``.ReadIfNotNull >> box
        | "dbo.ScaleGroupNotificationProperties", false -> __.``dbo.ScaleGroupNotificationProperties``.Read >> box
        | "dbo.ScaleGroupNotificationProperties", true -> __.``dbo.ScaleGroupNotificationProperties``.ReadIfNotNull >> box
        | "dbo.ScaleGroupOrganizationMaintenanceJobs", false -> __.``dbo.ScaleGroupOrganizationMaintenanceJobs``.Read >> box
        | "dbo.ScaleGroupOrganizationMaintenanceJobs", true -> __.``dbo.ScaleGroupOrganizationMaintenanceJobs``.ReadIfNotNull >> box
        | "dbo.ScaleGroupOrganizationMaintenanceJobsProperties", false -> __.``dbo.ScaleGroupOrganizationMaintenanceJobsProperties``.Read >> box
        | "dbo.ScaleGroupOrganizationMaintenanceJobsProperties", true -> __.``dbo.ScaleGroupOrganizationMaintenanceJobsProperties``.ReadIfNotNull >> box
        | "dbo.SecurityRole", false -> __.``dbo.SecurityRole``.Read >> box
        | "dbo.SecurityRole", true -> __.``dbo.SecurityRole``.ReadIfNotNull >> box
        | "dbo.SecurityRolePrivileges", false -> __.``dbo.SecurityRolePrivileges``.Read >> box
        | "dbo.SecurityRolePrivileges", true -> __.``dbo.SecurityRolePrivileges``.ReadIfNotNull >> box
        | "dbo.SecurityRolePrivilegesProperties", false -> __.``dbo.SecurityRolePrivilegesProperties``.Read >> box
        | "dbo.SecurityRolePrivilegesProperties", true -> __.``dbo.SecurityRolePrivilegesProperties``.ReadIfNotNull >> box
        | "dbo.SecurityRoleProperties", false -> __.``dbo.SecurityRoleProperties``.Read >> box
        | "dbo.SecurityRoleProperties", true -> __.``dbo.SecurityRoleProperties``.ReadIfNotNull >> box
        | "dbo.Server", false -> __.``dbo.Server``.Read >> box
        | "dbo.Server", true -> __.``dbo.Server``.ReadIfNotNull >> box
        | "dbo.ServerProperties", false -> __.``dbo.ServerProperties``.Read >> box
        | "dbo.ServerProperties", true -> __.``dbo.ServerProperties``.ReadIfNotNull >> box
        | "dbo.ServerSettings", false -> __.``dbo.ServerSettings``.Read >> box
        | "dbo.ServerSettings", true -> __.``dbo.ServerSettings``.ReadIfNotNull >> box
        | "dbo.ServerSettingsProperties", false -> __.``dbo.ServerSettingsProperties``.Read >> box
        | "dbo.ServerSettingsProperties", true -> __.``dbo.ServerSettingsProperties``.ReadIfNotNull >> box
        | "dbo.SiteLock", false -> __.``dbo.SiteLock``.Read >> box
        | "dbo.SiteLock", true -> __.``dbo.SiteLock``.ReadIfNotNull >> box
        | "dbo.SiteLockProperties", false -> __.``dbo.SiteLockProperties``.Read >> box
        | "dbo.SiteLockProperties", true -> __.``dbo.SiteLockProperties``.ReadIfNotNull >> box
        | "dbo.SqlGovernorClientConfiguration", false -> __.``dbo.SqlGovernorClientConfiguration``.Read >> box
        | "dbo.SqlGovernorClientConfiguration", true -> __.``dbo.SqlGovernorClientConfiguration``.ReadIfNotNull >> box
        | "dbo.SqlGovernorClientConfigurationProperties", false -> __.``dbo.SqlGovernorClientConfigurationProperties``.Read >> box
        | "dbo.SqlGovernorClientConfigurationProperties", true -> __.``dbo.SqlGovernorClientConfigurationProperties``.ReadIfNotNull >> box
        | "dbo.SqlGovernorRequests", false -> __.``dbo.SqlGovernorRequests``.Read >> box
        | "dbo.SqlGovernorRequests", true -> __.``dbo.SqlGovernorRequests``.ReadIfNotNull >> box
        | "dbo.SqlGovernorRequestsProperties", false -> __.``dbo.SqlGovernorRequestsProperties``.Read >> box
        | "dbo.SqlGovernorRequestsProperties", true -> __.``dbo.SqlGovernorRequestsProperties``.ReadIfNotNull >> box
        | "dbo.SqlGovernorServiceCategoryDescription", false -> __.``dbo.SqlGovernorServiceCategoryDescription``.Read >> box
        | "dbo.SqlGovernorServiceCategoryDescription", true -> __.``dbo.SqlGovernorServiceCategoryDescription``.ReadIfNotNull >> box
        | "dbo.SqlGovernorServiceCategoryDescriptionProperties", false -> __.``dbo.SqlGovernorServiceCategoryDescriptionProperties``.Read >> box
        | "dbo.SqlGovernorServiceCategoryDescriptionProperties", true -> __.``dbo.SqlGovernorServiceCategoryDescriptionProperties``.ReadIfNotNull >> box
        | "dbo.SqlGovernorServiceDescription", false -> __.``dbo.SqlGovernorServiceDescription``.Read >> box
        | "dbo.SqlGovernorServiceDescription", true -> __.``dbo.SqlGovernorServiceDescription``.ReadIfNotNull >> box
        | "dbo.SqlGovernorServiceDescriptionProperties", false -> __.``dbo.SqlGovernorServiceDescriptionProperties``.Read >> box
        | "dbo.SqlGovernorServiceDescriptionProperties", true -> __.``dbo.SqlGovernorServiceDescriptionProperties``.ReadIfNotNull >> box
        | "dbo.SqlGovernorServiceGroupDescription", false -> __.``dbo.SqlGovernorServiceGroupDescription``.Read >> box
        | "dbo.SqlGovernorServiceGroupDescription", true -> __.``dbo.SqlGovernorServiceGroupDescription``.ReadIfNotNull >> box
        | "dbo.SqlGovernorServiceGroupDescriptionProperties", false -> __.``dbo.SqlGovernorServiceGroupDescriptionProperties``.Read >> box
        | "dbo.SqlGovernorServiceGroupDescriptionProperties", true -> __.``dbo.SqlGovernorServiceGroupDescriptionProperties``.ReadIfNotNull >> box
        | "dbo.SqlGovernorSqlServers", false -> __.``dbo.SqlGovernorSqlServers``.Read >> box
        | "dbo.SqlGovernorSqlServers", true -> __.``dbo.SqlGovernorSqlServers``.ReadIfNotNull >> box
        | "dbo.SqlGovernorSqlServersConfig", false -> __.``dbo.SqlGovernorSqlServersConfig``.Read >> box
        | "dbo.SqlGovernorSqlServersConfig", true -> __.``dbo.SqlGovernorSqlServersConfig``.ReadIfNotNull >> box
        | "dbo.SqlGovernorSqlServersConfigProperties", false -> __.``dbo.SqlGovernorSqlServersConfigProperties``.Read >> box
        | "dbo.SqlGovernorSqlServersConfigProperties", true -> __.``dbo.SqlGovernorSqlServersConfigProperties``.ReadIfNotNull >> box
        | "dbo.SqlGovernorSqlServersProperties", false -> __.``dbo.SqlGovernorSqlServersProperties``.Read >> box
        | "dbo.SqlGovernorSqlServersProperties", true -> __.``dbo.SqlGovernorSqlServersProperties``.ReadIfNotNull >> box
        | "dbo.SystemUser", false -> __.``dbo.SystemUser``.Read >> box
        | "dbo.SystemUser", true -> __.``dbo.SystemUser``.ReadIfNotNull >> box
        | "dbo.SystemUserAuthentication", false -> __.``dbo.SystemUserAuthentication``.Read >> box
        | "dbo.SystemUserAuthentication", true -> __.``dbo.SystemUserAuthentication``.ReadIfNotNull >> box
        | "dbo.SystemUserAuthenticationProperties", false -> __.``dbo.SystemUserAuthenticationProperties``.Read >> box
        | "dbo.SystemUserAuthenticationProperties", true -> __.``dbo.SystemUserAuthenticationProperties``.ReadIfNotNull >> box
        | "dbo.SystemUserOrganizations", false -> __.``dbo.SystemUserOrganizations``.Read >> box
        | "dbo.SystemUserOrganizations", true -> __.``dbo.SystemUserOrganizations``.ReadIfNotNull >> box
        | "dbo.SystemUserOrganizationsProperties", false -> __.``dbo.SystemUserOrganizationsProperties``.Read >> box
        | "dbo.SystemUserOrganizationsProperties", true -> __.``dbo.SystemUserOrganizationsProperties``.ReadIfNotNull >> box
        | "dbo.SystemUserProperties", false -> __.``dbo.SystemUserProperties``.Read >> box
        | "dbo.SystemUserProperties", true -> __.``dbo.SystemUserProperties``.ReadIfNotNull >> box
        | "dbo.SystemUserRoles", false -> __.``dbo.SystemUserRoles``.Read >> box
        | "dbo.SystemUserRoles", true -> __.``dbo.SystemUserRoles``.ReadIfNotNull >> box
        | "dbo.SystemUserRolesProperties", false -> __.``dbo.SystemUserRolesProperties``.Read >> box
        | "dbo.SystemUserRolesProperties", true -> __.``dbo.SystemUserRolesProperties``.ReadIfNotNull >> box
        | "dbo.UpgradeActionTracker", false -> __.``dbo.UpgradeActionTracker``.Read >> box
        | "dbo.UpgradeActionTracker", true -> __.``dbo.UpgradeActionTracker``.ReadIfNotNull >> box
        | _ -> failwith $"Could not read type '{entity}' because no generated reader exists."

    static member private GetPrimitiveReader(t: System.Type, reader: Microsoft.Data.SqlClient.SqlDataReader, isOpt: bool) =
        let wrap get (ord: int) = 
            if isOpt 
            then (if reader.IsDBNull ord then None else get ord |> Some) |> box 
            else get ord |> box 
        

        if t = typedefof<System.Guid> then Some(wrap reader.GetGuid)
        else if t = typedefof<bool> then Some(wrap reader.GetBoolean)
        else if t = typedefof<int> then Some(wrap reader.GetInt32)
        else if t = typedefof<int64> then Some(wrap reader.GetInt64)
        else if t = typedefof<int16> then Some(wrap reader.GetInt16)
        else if t = typedefof<byte> then Some(wrap reader.GetByte)
        else if t = typedefof<double> then Some(wrap reader.GetDouble)
        else if t = typedefof<System.Single> then Some(wrap reader.GetFloat)
        else if t = typedefof<decimal> then Some(wrap reader.GetDecimal)
        else if t = typedefof<string> then Some(wrap reader.GetString)
        else if t = typedefof<System.DateTimeOffset> then Some(wrap reader.GetDateTimeOffset)
        else if t = typedefof<System.DateOnly> then Some(wrap reader.GetDateOnly)
        else if t = typedefof<System.TimeOnly> then Some(wrap reader.GetTimeOnly)
        else if t = typedefof<System.DateTime> then Some(wrap reader.GetDateTime)
        else if t = typedefof<byte []> then Some(wrap reader.GetValue)
        else if t = typedefof<obj> then Some(wrap reader.GetValue)
        else None

    static member Read(reader: Microsoft.Data.SqlClient.SqlDataReader) = 
        let hydra = HydraReader(reader)
                    
        let getOrdinalAndIncrement() = 
            let ordinal = hydra.AccFieldCount
            hydra.AccFieldCount <- hydra.AccFieldCount + 1
            ordinal
            
        let buildEntityReadFn (t: System.Type) = 
            let t, isOpt = 
                if t.IsGenericType && t.GetGenericTypeDefinition() = typedefof<Option<_>> 
                then t.GenericTypeArguments.[0], true
                else t, false
            
            match HydraReader.GetPrimitiveReader(t, reader, isOpt) with
            | Some primitiveReader -> 
                let ord = getOrdinalAndIncrement()
                fun () -> primitiveReader ord
            | None ->
                let nameParts = t.FullName.Split([| '.'; '+' |])
                let schemaAndType = nameParts |> Array.skip (nameParts.Length - 2) |> fun parts -> System.String.Join(".", parts)
                hydra.GetReaderByName(schemaAndType, isOpt)
            
        // Return a fn that will hydrate 'T (which may be a tuple)
        // This fn will be called once per each record returned by the data reader.
        let t = typeof<'T>
        if FSharp.Reflection.FSharpType.IsTuple(t) then
            let readEntityFns = FSharp.Reflection.FSharpType.GetTupleElements(t) |> Array.map buildEntityReadFn
            fun () ->
                let entities = readEntityFns |> Array.map (fun read -> read())
                Microsoft.FSharp.Reflection.FSharpValue.MakeTuple(entities, t) :?> 'T
        else
            let readEntityFn = t |> buildEntityReadFn
            fun () -> 
                readEntityFn() :?> 'T
        
